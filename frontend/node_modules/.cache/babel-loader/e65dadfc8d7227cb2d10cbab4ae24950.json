{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\NonPharmacyProducts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\n\nconst NonPharmacyProducts = () => {\n  _s();\n\n  const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [unitTypes, setUnitTypes] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentProduct, setCurrentProduct] = useState(null);\n\n  const handleOpenModal = () => {\n    if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  };\n\n  const handleOpenEditModal = async productId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${productId}`);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch product: ${response.status}`);\n      }\n\n      const productData = await response.json();\n      const productToEdit = productData.data || productData;\n      setCurrentProduct(productToEdit);\n\n      if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\n        fetchDropdownData();\n      }\n\n      document.getElementById('edit-product').checked = true;\n    } catch (error) {\n      console.error('Error fetching product for edit:', error);\n      toast.error(`Could not load product: ${error.message}`);\n    }\n  };\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  };\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes, unitTypesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`), fetch(`http://localhost:5000/api/setup/unitTypes`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json();\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json();\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n\n      if (unitTypesRes.ok) {\n        const unitTypesData = await unitTypesRes.json();\n\n        if (Array.isArray(unitTypesData)) {\n          setUnitTypes(unitTypesData);\n        } else if (unitTypesData.data && Array.isArray(unitTypesData.data)) {\n          setUnitTypes(unitTypesData.data);\n        } else {\n          toast.error(\"Invalid unit types data format\");\n        }\n      } else {\n        toast.error(\"Failed to load unit types\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  };\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\n      const data = await response.json();\n\n      if (response.ok) {\n        setNonPharmacyProducts(data.data);\n        setTotalProducts(data.totalItems);\n        setTotalPages(data.totalPages);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]);\n  useEffect(() => {\n    fetchDropdownData();\n  }, []);\n\n  const addNonPharmacyProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries());\n    const requiredFields = ['tradeName', 'category', 'company', 'unitType'];\n    const missingFields = requiredFields.filter(field => !productDetails[field]);\n\n    if (missingFields.length > 0) {\n      toast.error(`Missing required fields: ${missingFields.join(', ')}`);\n      return;\n    }\n\n    productDetails.addedBy = 'admin';\n    productDetails.addedToDbAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        document.getElementById('create-new-product').checked = false;\n        toast.success('Product added successfully');\n        fetchProducts(currentPage, productsPerPage);\n        event.target.reset();\n      } else {\n        toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    }\n  };\n\n  const updateNonPharmacyProduct = async event => {\n    event.preventDefault();\n\n    if (!currentProduct) {\n      toast.error('No product selected for update');\n      return;\n    }\n\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries());\n    ['stock', 'price'].forEach(field => {\n      if (productDetails[field]) {\n        productDetails[field] = Number(productDetails[field]);\n      }\n    });\n    productDetails.updatedBy = 'admin';\n    productDetails.updatedAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n\n      if (response.ok) {\n        toast.success('Product updated successfully');\n        document.getElementById('edit-product').checked = false;\n        fetchProducts(currentPage, productsPerPage);\n        setCurrentProduct(null);\n      } else {\n        const errorData = await response.json();\n        toast.error(`Failed to update product: ${errorData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n      toast.error(`Error updating product: ${error.message}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"p-4 mt-16\",\n    children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n      name: \"Non-Pharmacy Products\",\n      value: totalProducts,\n      buttons: [/*#__PURE__*/_jsxDEV(NewButton, {\n        modalId: \"create-new-product\",\n        onClick: handleOpenModal\n      }, \"new-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n        onClick: handleRefresh\n      }, \"refresh-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PrintButton, {}, \"print-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"create-new-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'create-new-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Create a Non-Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addNonPharmacyProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Trade Name',\n              type: \"text\",\n              name: \"tradeName\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Unit Type',\n              name: \"unitType\",\n              isRequired: \"required\",\n              options: unitTypes.map(u => u.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Stock',\n              type: \"number\",\n              name: \"stock\",\n              defaultValue: 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Price',\n              type: \"number\",\n              name: \"price\",\n              defaultValue: 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'create-new-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"edit-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"edit-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'edit-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Edit Non-Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), currentProduct && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: updateNonPharmacyProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Trade Name',\n              type: \"text\",\n              name: \"tradeName\",\n              defaultValue: currentProduct.tradeName,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name),\n              defaultValue: currentProduct.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name),\n              defaultValue: currentProduct.company\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Unit Type',\n              name: \"unitType\",\n              isRequired: \"required\",\n              options: unitTypes.map(u => u.Name),\n              defaultValue: currentProduct.unitType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Stock',\n              type: \"number\",\n              name: \"stock\",\n              defaultValue: currentProduct.stock || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Price',\n              type: \"number\",\n              name: \"price\",\n              defaultValue: currentProduct.price || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'edit-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Trade Name', 'Category', 'Company', 'Stock', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: nonPharmacyProducts.length > 0 ? nonPharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.tradeName, product.category, product.company, product.stock || 0, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex items-center gap-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(EditButton, {\n              id: product._id,\n              onClick: handleOpenEditModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n              deleteApiLink: `${API_BASE_URL}/${product._id}`,\n              itemId: product._id,\n              name: product.tradeName,\n              onDelete: () => fetchProducts(currentPage, productsPerPage)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 37\n          }, this)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"6\",\n            className: \"text-center py-4\",\n            children: \"No products found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination mt-4 flex justify-center gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.max(prev - 1, 1)),\n        disabled: currentPage === 1,\n        className: \"btn btn-sm\",\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 21\n      }, this), currentPage > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(1),\n        className: `btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`,\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 25\n      }, this), currentPage > 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"btn btn-sm btn-disabled\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 41\n      }, this), Array.from({\n        length: totalPages\n      }, (_, i) => {\n        const pageNumber = i + 1; // Show only a subset of pages around the current page\n\n        if (pageNumber >= currentPage - 2 && pageNumber <= currentPage + 2) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentPage(pageNumber),\n            className: `btn btn-sm ${currentPage === pageNumber ? 'btn-active' : ''}`,\n            children: pageNumber\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 33\n          }, this);\n        }\n\n        return null;\n      }), currentPage < totalPages - 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"btn btn-sm btn-disabled\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 54\n      }, this), currentPage < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(totalPages),\n        className: `btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`,\n        children: totalPages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.min(prev + 1, totalPages)),\n        disabled: currentPage === totalPages,\n        className: \"btn btn-sm\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NonPharmacyProducts, \"qGFKDVhuCVUg3dZGcTSS/4HGpbk=\");\n\n_c = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","NonPharmacyProducts","nonPharmacyProducts","setNonPharmacyProducts","categories","setCategories","companies","setCompanies","unitTypes","setUnitTypes","currentPage","setCurrentPage","productsPerPage","totalProducts","setTotalProducts","totalPages","setTotalPages","isModalOpen","setIsModalOpen","currentProduct","setCurrentProduct","handleOpenModal","length","fetchDropdownData","info","document","getElementById","checked","handleOpenEditModal","productId","response","fetch","ok","Error","status","productData","json","productToEdit","data","error","console","message","handleRefresh","fetchProducts","categoriesRes","companiesRes","unitTypesRes","Promise","all","categoriesData","Array","isArray","companiesData","unitTypesData","page","limit","totalItems","addNonPharmacyProduct","event","preventDefault","formData","FormData","target","productDetails","Object","fromEntries","entries","requiredFields","missingFields","filter","field","join","addedBy","addedToDbAt","Date","toISOString","method","headers","body","JSON","stringify","success","reset","updateNonPharmacyProduct","forEach","Number","updatedBy","updatedAt","_id","errorData","map","c","Name","u","tradeName","category","company","unitType","stock","price","item","index","product","prev","Math","max","from","_","i","pageNumber","min"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/NonPharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [unitTypes, setUnitTypes] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage] = useState(10);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [currentProduct, setCurrentProduct] = useState(null);\r\n\r\n    const handleOpenModal = () => {\r\n        if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\r\n            fetchDropdownData();\r\n            toast.info(\"Loading form data...\");\r\n        }\r\n        document.getElementById('create-new-product').checked = true;\r\n    };\r\n\r\n    const handleOpenEditModal = async (productId) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/${productId}`);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch product: ${response.status}`);\r\n            }\r\n            \r\n            const productData = await response.json();\r\n            const productToEdit = productData.data || productData;\r\n            \r\n            setCurrentProduct(productToEdit);\r\n            \r\n            if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\r\n                fetchDropdownData();\r\n            }\r\n            \r\n            document.getElementById('edit-product').checked = true;\r\n        } catch (error) {\r\n            console.error('Error fetching product for edit:', error);\r\n            toast.error(`Could not load product: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes, unitTypesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`),\r\n                fetch(`http://localhost:5000/api/setup/unitTypes`)\r\n            ]);\r\n\r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n\r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n\r\n            if (unitTypesRes.ok) {\r\n                const unitTypesData = await unitTypesRes.json();\r\n                if (Array.isArray(unitTypesData)) {\r\n                    setUnitTypes(unitTypesData);\r\n                } else if (unitTypesData.data && Array.isArray(unitTypesData.data)) {\r\n                    setUnitTypes(unitTypesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid unit types data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load unit types\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    const fetchProducts = async (page = 1, limit = productsPerPage) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setNonPharmacyProducts(data.data);\r\n                setTotalProducts(data.totalItems);\r\n                setTotalPages(data.totalPages);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    const addNonPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n\r\n        const requiredFields = ['tradeName', 'category', 'company', 'unitType'];\r\n        const missingFields = requiredFields.filter(field => !productDetails[field]);\r\n\r\n        if (missingFields.length > 0) {\r\n            toast.error(`Missing required fields: ${missingFields.join(', ')}`);\r\n            return;\r\n        }\r\n\r\n        productDetails.addedBy = 'admin';\r\n        productDetails.addedToDbAt = new Date().toISOString();\r\n\r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(productDetails)\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                document.getElementById('create-new-product').checked = false;\r\n                toast.success('Product added successfully');\r\n                fetchProducts(currentPage, productsPerPage);\r\n                event.target.reset();\r\n            } else {\r\n                toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n    };\r\n\r\n    const updateNonPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        if (!currentProduct) {\r\n            toast.error('No product selected for update');\r\n            return;\r\n        }\r\n        \r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        ['stock', 'price'].forEach(field => {\r\n            if (productDetails[field]) {\r\n                productDetails[field] = Number(productDetails[field]);\r\n            }\r\n        });\r\n        \r\n        productDetails.updatedBy = 'admin';\r\n        productDetails.updatedAt = new Date().toISOString();\r\n        \r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            if (response.ok) {\r\n                toast.success('Product updated successfully');\r\n                document.getElementById('edit-product').checked = false;\r\n                fetchProducts(currentPage, productsPerPage);\r\n                setCurrentProduct(null);\r\n            } else {\r\n                const errorData = await response.json();\r\n                toast.error(`Failed to update product: ${errorData.message || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating product:', error);\r\n            toast.error(`Error updating product: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className='p-4 mt-16'>\r\n            <DashboardPageHeading\r\n                name='Non-Pharmacy Products'\r\n                value={totalProducts}\r\n                buttons={[\r\n                    <NewButton key=\"new-button\" modalId='create-new-product' onClick={handleOpenModal} />,\r\n                    <RefreshButton key=\"refresh-button\" onClick={handleRefresh} />,\r\n                    <PrintButton key=\"print-button\" />\r\n                ]}\r\n            />\r\n\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"create-new-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'create-new-product'} />\r\n                    <ModalHeading modalHeading={'Create a Non-Pharmacy Product'} />\r\n                    <form onSubmit={addNonPharmacyProduct}>\r\n                        <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                            <Input title={'Trade Name'} type='text' name='tradeName' required />\r\n                            <Select title={'Category'} name='category' isRequired='required' options={categories.map(c => c.Name)} />\r\n                            <Select title={'Company'} name='company' isRequired='required' options={companies.map(c => c.Name)} />\r\n                            <Select title={'Unit Type'} name='unitType' isRequired='required' options={unitTypes.map(u => u.Name)} />\r\n                            <Input title={'Stock'} type='number' name='stock' defaultValue={0} />\r\n                            <Input title={'Price'} type='number' name='price' defaultValue={0} />\r\n                        </div>\r\n                        <div className=\"flex gap-2 mt-4\">\r\n                            <SaveButton extraClass={''} />\r\n                            <CancelButton modalId={'create-new-product'} />\r\n                        </div>\r\n                    </form>\r\n                </label>\r\n            </label>\r\n\r\n            <input type=\"checkbox\" id=\"edit-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"edit-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'edit-product'} />\r\n                    <ModalHeading modalHeading={'Edit Non-Pharmacy Product'} />\r\n                    {currentProduct && (\r\n                        <form onSubmit={updateNonPharmacyProduct}>\r\n                            <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                                <Input \r\n                                    title={'Trade Name'} \r\n                                    type='text' \r\n                                    name='tradeName' \r\n                                    defaultValue={currentProduct.tradeName} \r\n                                    required \r\n                                />\r\n                                <Select \r\n                                    title={'Category'} \r\n                                    name='category' \r\n                                    isRequired='required' \r\n                                    options={categories.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.category}\r\n                                />\r\n                                <Select \r\n                                    title={'Company'} \r\n                                    name='company' \r\n                                    isRequired='required' \r\n                                    options={companies.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.company}\r\n                                />\r\n                                <Select \r\n                                    title={'Unit Type'} \r\n                                    name='unitType' \r\n                                    isRequired='required' \r\n                                    options={unitTypes.map(u => u.Name)} \r\n                                    defaultValue={currentProduct.unitType}\r\n                                />\r\n                                <Input \r\n                                    title={'Stock'} \r\n                                    type='number' \r\n                                    name='stock' \r\n                                    defaultValue={currentProduct.stock || 0} \r\n                                />\r\n                                <Input \r\n                                    title={'Price'} \r\n                                    type='number' \r\n                                    name='price' \r\n                                    defaultValue={currentProduct.price || 0} \r\n                                />\r\n                            </div>\r\n                            <div className=\"flex gap-2 mt-4\">\r\n                                <SaveButton extraClass={''} />\r\n                                <CancelButton modalId={'edit-product'} />\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </label>\r\n            </label>\r\n\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Trade Name', 'Category', 'Company', 'Stock', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {nonPharmacyProducts.length > 0 ? (\r\n                        nonPharmacyProducts.map((product, index) => (\r\n                            <TableRow\r\n                                key={product._id}\r\n                                tableRowsData={[\r\n                                    (currentPage - 1) * productsPerPage + index + 1,\r\n                                    product.tradeName,\r\n                                    product.category,\r\n                                    product.company,\r\n                                    product.stock || 0,\r\n                                    <span className='flex items-center gap-x-1'>\r\n                                        <EditButton \r\n                                            id={product._id} \r\n                                            onClick={handleOpenEditModal}\r\n                                        />\r\n                                        <DeleteButton\r\n                                            deleteApiLink={`${API_BASE_URL}/${product._id}`}\r\n                                            itemId={product._id}\r\n                                            name={product.tradeName}\r\n                                            onDelete={() => fetchProducts(currentPage, productsPerPage)}\r\n                                        />\r\n                                    </span>\r\n                                ]}\r\n                            />\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"6\" className=\"text-center py-4\">No products found</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            {totalPages > 0 && (\r\n                <div className='pagination mt-4 flex justify-center gap-2'>\r\n                    {/* Previous Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                        disabled={currentPage === 1}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Previous\r\n                    </button>\r\n\r\n                    {/* First Page Button */}\r\n                    {currentPage > 1 && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(1)}\r\n                            className={`btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`}\r\n                        >\r\n                            1\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Ellipsis for Skipped Pages */}\r\n                    {currentPage > 2 && <span className='btn btn-sm btn-disabled'>...</span>}\r\n\r\n                    {/* Middle Pages */}\r\n                    {Array.from({ length: totalPages }, (_, i) => {\r\n                        const pageNumber = i + 1;\r\n                        // Show only a subset of pages around the current page\r\n                        if (pageNumber >= currentPage - 2 && pageNumber <= currentPage + 2) {\r\n                            return (\r\n                                <button\r\n                                    key={i}\r\n                                    onClick={() => setCurrentPage(pageNumber)}\r\n                                    className={`btn btn-sm ${currentPage === pageNumber ? 'btn-active' : ''}`}\r\n                                >\r\n                                    {pageNumber}\r\n                                </button>\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n\r\n                    {/* Ellipsis for Skipped Pages */}\r\n                    {currentPage < totalPages - 2 && <span className='btn btn-sm btn-disabled'>...</span>}\r\n\r\n                    {/* Last Page Button */}\r\n                    {currentPage < totalPages && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(totalPages)}\r\n                            className={`btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`}\r\n                        >\r\n                            {totalPages}\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Next Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                        disabled={currentPage === totalPages}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}