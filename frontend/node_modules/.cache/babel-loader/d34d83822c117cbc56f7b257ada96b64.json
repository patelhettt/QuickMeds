{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\PharmacyProducts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/pharmacy';\n\nconst NonPharmacyProducts = () => {\n  _s();\n\n  const [pharmacyProducts, setPharmacyProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [unitTypes, setUnitTypes] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentProduct, setCurrentProduct] = useState(null); // Function to handle opening the modal\n\n  const handleOpenModal = () => {\n    // Check if dropdown data is loaded\n    if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\n      // If data isn't loaded yet, fetch it first\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  }; // Function to handle refresh\n\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  }; // Function to handle opening the edit modal\n\n\n  const handleOpenEditModal = productId => {\n    // Find the product to edit\n    const productToEdit = pharmacyProducts.find(product => product._id === productId);\n\n    if (productToEdit) {\n      setCurrentProduct(productToEdit); // Check if dropdown data is loaded\n\n      if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\n        fetchDropdownData();\n      }\n\n      document.getElementById('edit-pharmacy-product').checked = true;\n    } else {\n      toast.error(\"Product not found\");\n    }\n  }; // Separate function to fetch dropdown data\n\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes, unitTypesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`), fetch(`http://localhost:5000/api/setup/unitTypes`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n\n      if (unitTypesRes.ok) {\n        const unitTypesData = await unitTypesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(unitTypesData)) {\n          setUnitTypes(unitTypesData);\n        } else if (unitTypesData.data && Array.isArray(unitTypesData.data)) {\n          setUnitTypes(unitTypesData.data);\n        } else {\n          toast.error(\"Invalid unit types data format\");\n        }\n      } else {\n        toast.error(\"Failed to load unit types\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  }; // Fetch paginated products\n\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\n      const data = await response.json();\n\n      if (response.ok) {\n        setPharmacyProducts(data.data);\n        setTotalProducts(data.totalItems);\n        setTotalPages(data.totalPages);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    }\n  }; // Fetch products when the page changes\n\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]); // Fetch dropdown data when component mounts\n\n  useEffect(() => {\n    fetchDropdownData();\n  }, []);\n\n  const addPharmacyProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries()); // Check for required fields\n\n    const requiredFields = ['tradeName', 'genericName', 'strength', 'category', 'company', 'unitType'];\n    const missingFields = requiredFields.filter(field => !productDetails[field]);\n\n    if (missingFields.length > 0) {\n      toast.error(`Missing required fields: ${missingFields.join(', ')}`);\n      return;\n    } // Add metadata\n\n\n    productDetails.addedBy = 'admin';\n    productDetails.addedToDbAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        // Close the modal\n        document.getElementById('create-new-product').checked = false; // Show success message\n\n        toast.success( /*#__PURE__*/_jsxDEV(AddModal, {\n          name: productDetails.tradeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 31\n        }, this)); // Refresh the product list\n\n        fetchProducts(currentPage, productsPerPage);\n      } else {\n        console.error('Error adding product:', data);\n        toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    } // Reset the form\n\n\n    event.target.reset();\n  };\n\n  const updatePharmacyProduct = async event => {\n    event.preventDefault();\n\n    if (!currentProduct) {\n      toast.error('No product selected for update');\n      return;\n    }\n\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries());\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n\n      if (response.ok) {\n        toast.success('Product updated successfully');\n        document.getElementById('edit-pharmacy-product').checked = false;\n        handleRefresh();\n        setCurrentProduct(null);\n      } else {\n        toast.error('Failed to update product');\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n      toast.error('Error updating product');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"p-4 mt-16\",\n    children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n      name: \"Pharmacy Products\",\n      value: totalProducts,\n      buttons: [/*#__PURE__*/_jsxDEV(NewButton, {\n        modalId: \"create-new-product\",\n        onClick: handleOpenModal\n      }, \"new-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n        onClick: handleRefresh\n      }, \"refresh-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PrintButton, {}, \"print-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"create-new-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'create-new-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Create a Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addPharmacyProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Trade Name',\n              type: \"text\",\n              name: \"tradeName\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Generic Name',\n              type: \"text\",\n              name: \"genericName\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Strength',\n              type: \"number\",\n              name: \"strength\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Unit Type',\n              name: \"unitType\",\n              isRequired: \"required\",\n              options: unitTypes.map(u => u.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'create-new-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Trade Name', 'Category', 'Strength', 'Company', 'Stock', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: pharmacyProducts.length > 0 ? pharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.tradeName, product.category, product.strength, product.company, product.stock, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex items-center gap-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(EditButton, {\n              id: product._id,\n              onClick: () => handleOpenEditModal(product._id),\n              apiEndpoint: API_BASE_URL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n              deleteApiLink: `${API_BASE_URL}/${product._id}`,\n              itemId: product._id,\n              name: product.tradeName,\n              onDelete: () => fetchProducts(currentPage, productsPerPage)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 37\n          }, this)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"7\",\n            className: \"text-center py-4\",\n            children: \"No products found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination mt-4 flex justify-center gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.max(prev - 1, 1)),\n        disabled: currentPage === 1,\n        className: \"btn btn-sm\",\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }, this), currentPage > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(1),\n        className: `btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`,\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 25\n      }, this), currentPage < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(totalPages),\n        className: `btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`,\n        children: totalPages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.min(prev + 1, totalPages)),\n        disabled: currentPage === totalPages,\n        className: \"btn btn-sm\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"edit-pharmacy-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"edit-pharmacy-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'edit-pharmacy-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Edit Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this), currentProduct && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: updatePharmacyProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Trade Name',\n              type: \"text\",\n              name: \"tradeName\",\n              defaultValue: currentProduct.tradeName,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Generic Name',\n              type: \"text\",\n              name: \"genericName\",\n              defaultValue: currentProduct.genericName,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Strength',\n              type: \"number\",\n              name: \"strength\",\n              defaultValue: currentProduct.strength,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name),\n              defaultValue: currentProduct.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name),\n              defaultValue: currentProduct.company\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Unit Type',\n              name: \"unitType\",\n              isRequired: \"required\",\n              options: unitTypes.map(u => u.Name),\n              defaultValue: currentProduct.unitType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'edit-pharmacy-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NonPharmacyProducts, \"L34mwL3l8Z/WiT8NywIKUwjMk7A=\");\n\n_c = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","NonPharmacyProducts","pharmacyProducts","setPharmacyProducts","categories","setCategories","companies","setCompanies","unitTypes","setUnitTypes","currentPage","setCurrentPage","productsPerPage","totalProducts","setTotalProducts","totalPages","setTotalPages","isModalOpen","setIsModalOpen","currentProduct","setCurrentProduct","handleOpenModal","length","fetchDropdownData","info","document","getElementById","checked","handleRefresh","fetchProducts","handleOpenEditModal","productId","productToEdit","find","product","_id","error","categoriesRes","companiesRes","unitTypesRes","Promise","all","fetch","ok","categoriesData","json","Array","isArray","data","companiesData","unitTypesData","page","limit","response","totalItems","console","addPharmacyProduct","event","preventDefault","formData","FormData","target","productDetails","Object","fromEntries","entries","requiredFields","missingFields","filter","field","join","addedBy","addedToDbAt","Date","toISOString","method","headers","body","JSON","stringify","success","tradeName","reset","updatePharmacyProduct","map","c","Name","u","item","index","category","strength","company","stock","prev","Math","max","min","genericName","unitType"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/PharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/pharmacy'; \r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [pharmacyProducts, setPharmacyProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [unitTypes, setUnitTypes] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage] = useState(10);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [currentProduct, setCurrentProduct] = useState(null);\r\n\r\n    // Function to handle opening the modal\r\n    const handleOpenModal = () => {\r\n        // Check if dropdown data is loaded\r\n        if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\r\n            // If data isn't loaded yet, fetch it first\r\n            fetchDropdownData();\r\n            toast.info(\"Loading form data...\");\r\n        }\r\n        document.getElementById('create-new-product').checked = true;\r\n    };\r\n\r\n    // Function to handle refresh\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    // Function to handle opening the edit modal\r\n    const handleOpenEditModal = (productId) => {\r\n        // Find the product to edit\r\n        const productToEdit = pharmacyProducts.find(product => product._id === productId);\r\n        if (productToEdit) {\r\n            setCurrentProduct(productToEdit);\r\n            \r\n            // Check if dropdown data is loaded\r\n            if (categories.length === 0 || companies.length === 0 || unitTypes.length === 0) {\r\n                fetchDropdownData();\r\n            }\r\n            \r\n            document.getElementById('edit-pharmacy-product').checked = true;\r\n        } else {\r\n            toast.error(\"Product not found\");\r\n        }\r\n    };\r\n\r\n    // Separate function to fetch dropdown data\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes, unitTypesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`),\r\n                fetch(`http://localhost:5000/api/setup/unitTypes`)\r\n            ]);\r\n            \r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n            \r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n            \r\n            if (unitTypesRes.ok) {\r\n                const unitTypesData = await unitTypesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(unitTypesData)) {\r\n                    setUnitTypes(unitTypesData);\r\n                } else if (unitTypesData.data && Array.isArray(unitTypesData.data)) {\r\n                    setUnitTypes(unitTypesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid unit types data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load unit types\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    // Fetch paginated products\r\n    const fetchProducts = async (page = 1, limit = productsPerPage) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setPharmacyProducts(data.data);\r\n                setTotalProducts(data.totalItems);\r\n                setTotalPages(data.totalPages);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n    };\r\n\r\n\r\n    // Fetch products when the page changes\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    const addPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        // Check for required fields\r\n        const requiredFields = ['tradeName', 'genericName', 'strength', 'category', 'company', 'unitType'];\r\n        const missingFields = requiredFields.filter(field => !productDetails[field]);\r\n        \r\n        if (missingFields.length > 0) {\r\n            toast.error(`Missing required fields: ${missingFields.join(', ')}`);\r\n            return;\r\n        }\r\n        \r\n        // Add metadata\r\n        productDetails.addedBy = 'admin';\r\n        productDetails.addedToDbAt = new Date().toISOString();\r\n\r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(productDetails)\r\n            });\r\n            \r\n            const data = await response.json();\r\n            \r\n            if (response.ok) {\r\n                // Close the modal\r\n                document.getElementById('create-new-product').checked = false;\r\n                \r\n                // Show success message\r\n                toast.success(<AddModal name={productDetails.tradeName} />);\r\n                \r\n                // Refresh the product list\r\n                fetchProducts(currentPage, productsPerPage);\r\n            } else {\r\n                console.error('Error adding product:', data);\r\n                toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n        \r\n        // Reset the form\r\n        event.target.reset();\r\n    };\r\n\r\n    const updatePharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        if (!currentProduct) {\r\n            toast.error('No product selected for update');\r\n            return;\r\n        }\r\n        \r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            if (response.ok) {\r\n                toast.success('Product updated successfully');\r\n                document.getElementById('edit-pharmacy-product').checked = false;\r\n                handleRefresh();\r\n                setCurrentProduct(null);\r\n            } else {\r\n                toast.error('Failed to update product');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating product:', error);\r\n            toast.error('Error updating product');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className='p-4 mt-16'>\r\n            <DashboardPageHeading\r\n                name='Pharmacy Products'\r\n                value={totalProducts}\r\n                buttons={[\r\n                    <NewButton key=\"new-button\" modalId='create-new-product' onClick={handleOpenModal} />,\r\n                    <RefreshButton key=\"refresh-button\" onClick={handleRefresh} />,\r\n                    <PrintButton key=\"print-button\" />\r\n                ]}\r\n            />\r\n\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"create-new-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'create-new-product'} />\r\n                    <ModalHeading modalHeading={'Create a Pharmacy Product'} />\r\n                    <form onSubmit={addPharmacyProduct}>\r\n                        <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                            <Input title={'Trade Name'} type='text' name='tradeName' required />\r\n                            <Input title={'Generic Name'} type='text' name='genericName' required />\r\n                            <Input title={'Strength'} type='number' name='strength' required />\r\n                            <Select title={'Category'} name='category' isRequired='required' options={categories.map(c => c.Name)} />\r\n                            <Select title={'Company'} name='company' isRequired='required' options={companies.map(c => c.Name)} />\r\n                            <Select title={'Unit Type'} name='unitType' isRequired='required' options={unitTypes.map(u => u.Name)} />\r\n                        </div>\r\n                        <div className=\"flex gap-2 mt-4\">\r\n                            <SaveButton extraClass={''} />\r\n                            <CancelButton modalId={'create-new-product'} />\r\n                        </div>\r\n                    </form>\r\n                </label>\r\n            </label>\r\n\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Trade Name', 'Category', 'Strength', 'Company', 'Stock', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {pharmacyProducts.length > 0 ? (\r\n                        pharmacyProducts.map((product, index) => (\r\n                            <TableRow\r\n                                key={product._id}\r\n                                tableRowsData={[\r\n                                    (currentPage - 1) * productsPerPage + index + 1,\r\n                                    product.tradeName,\r\n                                    product.category,\r\n                                    product.strength,\r\n                                    product.company,\r\n                                    product.stock,\r\n                                    <span className='flex items-center gap-x-1'>\r\n                                        <EditButton \r\n                                            id={product._id} \r\n                                            onClick={() => handleOpenEditModal(product._id)} \r\n                                            apiEndpoint={API_BASE_URL}\r\n                                        />\r\n                                        <DeleteButton\r\n                                            deleteApiLink={`${API_BASE_URL}/${product._id}`}\r\n                                            itemId={product._id}\r\n                                            name={product.tradeName}\r\n                                            onDelete={() => fetchProducts(currentPage, productsPerPage)}\r\n                                        />\r\n                                    </span>\r\n                                ]}\r\n                            />\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"7\" className=\"text-center py-4\">No products found</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            {totalPages > 0 && (\r\n                <div className='pagination mt-4 flex justify-center gap-2'>\r\n                    {/* Previous Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                        disabled={currentPage === 1}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Previous\r\n                    </button>\r\n\r\n                    {/* First Page Button */}\r\n                    {currentPage > 1 && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(1)}\r\n                            className={`btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`}\r\n                        >\r\n                            1\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* ... other pagination buttons ... */}\r\n\r\n                    {/* Last Page Button */}\r\n                    {currentPage < totalPages && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(totalPages)}\r\n                            className={`btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`}\r\n                        >\r\n                            {totalPages}\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Next Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                        disabled={currentPage === totalPages}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Edit Product Modal */}\r\n            <input type=\"checkbox\" id=\"edit-pharmacy-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"edit-pharmacy-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'edit-pharmacy-product'} />\r\n                    <ModalHeading modalHeading={'Edit Pharmacy Product'} />\r\n                    {currentProduct && (\r\n                        <form onSubmit={updatePharmacyProduct}>\r\n                            <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                                <Input title={'Trade Name'} type='text' name='tradeName' defaultValue={currentProduct.tradeName} required />\r\n                                <Input title={'Generic Name'} type='text' name='genericName' defaultValue={currentProduct.genericName} required />\r\n                                <Input title={'Strength'} type='number' name='strength' defaultValue={currentProduct.strength} required />\r\n                                <Select \r\n                                    title={'Category'} \r\n                                    name='category' \r\n                                    isRequired='required' \r\n                                    options={categories.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.category}\r\n                                />\r\n                                <Select \r\n                                    title={'Company'} \r\n                                    name='company' \r\n                                    isRequired='required' \r\n                                    options={companies.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.company}\r\n                                />\r\n                                <Select \r\n                                    title={'Unit Type'} \r\n                                    name='unitType' \r\n                                    isRequired='required' \r\n                                    options={unitTypes.map(u => u.Name)} \r\n                                    defaultValue={currentProduct.unitType}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex gap-2 mt-4\">\r\n                                <SaveButton extraClass={''} />\r\n                                <CancelButton modalId={'edit-pharmacy-product'} />\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </label>\r\n            </label>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}