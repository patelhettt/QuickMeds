{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\NonPharmacyProducts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\n\nconst NonPharmacyProducts = () => {\n  _s();\n\n  const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentProduct, setCurrentProduct] = useState(null); // Function to handle opening the modal\n\n  const handleOpenModal = () => {\n    // Check if dropdown data is loaded\n    if (categories.length === 0 || companies.length === 0) {\n      // If data isn't loaded yet, fetch it first\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  }; // Function to handle opening the edit modal\n\n\n  const handleOpenEditModal = async productId => {\n    try {\n      // Fetch the product directly from the API to ensure we have the latest data\n      const response = await fetch(`${API_BASE_URL}/${productId}`);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch product: ${response.status}`);\n      }\n\n      const productData = await response.json();\n      const productToEdit = productData.data || productData;\n      setCurrentProduct(productToEdit); // Check if dropdown data is loaded\n\n      if (categories.length === 0 || companies.length === 0) {\n        fetchDropdownData();\n      }\n\n      document.getElementById('edit-product').checked = true;\n    } catch (error) {\n      console.error('Error fetching product for edit:', error);\n      toast.error(`Could not load product: ${error.message}`);\n    }\n  }; // Function to handle refresh\n\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  }; // Separate function to fetch dropdown data\n\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  }; // Fetch paginated products\n\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\n      const data = await response.json();\n\n      if (response.ok) {\n        setNonPharmacyProducts(data.data);\n        setTotalProducts(data.totalItems);\n        setTotalPages(data.totalPages);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    }\n  }; // Fetch products when the page changes\n\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]); // Fetch dropdown data when component mounts\n\n  useEffect(() => {\n    fetchDropdownData();\n  }, []); // Function to handle form submission for creating a new product\n\n  const handleCreateProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries()); // Convert numeric fields to numbers\n\n    ['Price', 'Discount', 'Stock', 'Pack_TP', 'Pack_MRP'].forEach(field => {\n      if (productDetails[field]) {\n        productDetails[field] = Number(productDetails[field]);\n      }\n    });\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n\n      if (response.ok) {\n        toast.success('Product created successfully');\n        document.getElementById('create-new-product').checked = false;\n        event.target.reset();\n        fetchProducts(currentPage, productsPerPage);\n      } else {\n        const errorData = await response.json();\n        toast.error(`Failed to create product: ${errorData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error creating product:', error);\n      toast.error(`Error creating product: ${error.message}`);\n    }\n  }; // Function to handle product update\n\n\n  const handleProductUpdate = async e => {\n    e.preventDefault();\n    console.log(\"Form submitted\");\n\n    if (!currentProduct) {\n      toast.error('No product selected for update');\n      return;\n    } // Collect form data\n\n\n    const formData = new FormData(e.target);\n    const productData = Object.fromEntries(formData.entries()); // Convert numeric fields\n\n    ['Price', 'Discount', 'Stock', 'Pack_TP', 'Pack_MRP', 'Unit_TP', 'Unit_MRP'].forEach(field => {\n      if (productData[field]) {\n        productData[field] = Number(productData[field]);\n      }\n    });\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productData)\n      });\n      console.log(\"Update response status:\", response.status);\n\n      if (response.ok) {\n        toast.success(\"Product updated successfully\");\n        document.getElementById('edit-product').checked = false;\n        fetchProducts(currentPage, productsPerPage);\n      } else {\n        const errorText = await response.text();\n        console.error(\"Update failed:\", errorText);\n        toast.error(`Update failed: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Update error:\", error);\n      toast.error(`Error: ${error.message}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"dashboard-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n        headingText: 'Non-Pharmacy Products'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(PrintButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n          onClick: handleRefresh\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NewButton, {\n          onClick: handleOpenModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"create-new-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'create-new-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Create New Non-Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCreateProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Product Name',\n              type: \"text\",\n              name: \"Product_name\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Code',\n              type: \"text\",\n              name: \"Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"Category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"Company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Stock',\n              type: \"text\",\n              name: \"Stock\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Type',\n              type: \"text\",\n              name: \"Pack_Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Size',\n              type: \"text\",\n              name: \"Pack_Size\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Pack TP',\n              type1: \"number\",\n              name1: \"Pack_TP\",\n              title2: 'Pack MRP',\n              type2: \"number\",\n              name2: \"Pack_MRP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Unit TP',\n              type1: \"number\",\n              name1: \"Unit_TP\",\n              title2: 'Unit MRP',\n              type2: \"number\",\n              name2: \"Unit_MRP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"textarea textarea-bordered col-span-3\",\n              placeholder: \"Description\",\n              name: \"Strength\",\n              rows: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'create-new-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"edit-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"edit-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'edit-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Edit Non-Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 21\n        }, this), currentProduct && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleProductUpdate,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Product Name',\n              type: \"text\",\n              name: \"Product_name\",\n              defaultValue: currentProduct.Product_name,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Code',\n              type: \"text\",\n              name: \"Code\",\n              defaultValue: currentProduct.Code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"Category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name),\n              defaultValue: currentProduct.Category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"Company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name),\n              defaultValue: currentProduct.Company\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Stock',\n              type: \"text\",\n              name: \"Stock\",\n              defaultValue: currentProduct.Stock,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Type',\n              type: \"text\",\n              name: \"Pack_Type\",\n              defaultValue: currentProduct.Pack_Type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Size',\n              type: \"text\",\n              name: \"Pack_Size\",\n              defaultValue: currentProduct.Pack_Size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Pack TP',\n              type1: \"number\",\n              name1: \"Pack_TP\",\n              defaultValue1: currentProduct.Pack_TP,\n              title2: 'Pack MRP',\n              type2: \"number\",\n              name2: \"Pack_MRP\",\n              defaultValue2: currentProduct.Pack_MRP\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Unit TP',\n              type1: \"number\",\n              name1: \"Unit_TP\",\n              defaultValue1: currentProduct.Unit_TP,\n              title2: 'Unit MRP',\n              type2: \"number\",\n              name2: \"Unit_MRP\",\n              defaultValue2: currentProduct.Unit_MRP\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"textarea textarea-bordered col-span-3\",\n              placeholder: \"Description\",\n              name: \"Strength\",\n              defaultValue: currentProduct.Strength,\n              rows: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'edit-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: nonPharmacyProducts.length > 0 ? nonPharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.Product_name, product.Category, product.Company, product.Stock, product.Pack_Type, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex items-center gap-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(EditButton, {\n              id: product._id,\n              onClick: handleOpenEditModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n              deleteApiLink: `${API_BASE_URL}/${product._id}`,\n              itemId: product._id,\n              name: product.Product_name,\n              onDelete: () => fetchProducts(currentPage, productsPerPage)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 37\n          }, this)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"7\",\n            className: \"text-center py-4\",\n            children: \"No products found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination mt-4 flex justify-center gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.max(prev - 1, 1)),\n        disabled: currentPage === 1,\n        className: \"btn btn-sm\",\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 21\n      }, this), currentPage > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(1),\n        className: `btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`,\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 25\n      }, this), currentPage > 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"btn btn-sm btn-disabled\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 41\n      }, this), Array.from({\n        length: totalPages\n      }, (_, i) => {\n        const pageNumber = i + 1; // Show only a subset of pages around the current page\n\n        if (pageNumber >= currentPage - 2 && pageNumber <= currentPage + 2) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentPage(pageNumber),\n            className: `btn btn-sm ${currentPage === pageNumber ? 'btn-active' : ''}`,\n            children: pageNumber\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 33\n          }, this);\n        }\n\n        return null;\n      }), currentPage < totalPages - 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"btn btn-sm btn-disabled\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 54\n      }, this), currentPage < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(totalPages),\n        className: `btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`,\n        children: totalPages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.min(prev + 1, totalPages)),\n        disabled: currentPage === totalPages,\n        className: \"btn btn-sm\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NonPharmacyProducts, \"wYApMQIHGQ62l33RPzJP70/gCvE=\");\n\n_c = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","NonPharmacyProducts","nonPharmacyProducts","setNonPharmacyProducts","categories","setCategories","companies","setCompanies","currentPage","setCurrentPage","productsPerPage","totalProducts","setTotalProducts","totalPages","setTotalPages","isModalOpen","setIsModalOpen","currentProduct","setCurrentProduct","handleOpenModal","length","fetchDropdownData","info","document","getElementById","checked","handleOpenEditModal","productId","response","fetch","ok","Error","status","productData","json","productToEdit","data","error","console","message","handleRefresh","fetchProducts","categoriesRes","companiesRes","Promise","all","categoriesData","Array","isArray","companiesData","page","limit","totalItems","handleCreateProduct","event","preventDefault","formData","FormData","target","productDetails","Object","fromEntries","entries","forEach","field","Number","method","headers","body","JSON","stringify","success","reset","errorData","handleProductUpdate","e","log","_id","errorText","text","map","c","Name","Product_name","Code","Category","Company","Stock","Pack_Type","Pack_Size","Pack_TP","Pack_MRP","Unit_TP","Unit_MRP","Strength","item","index","product","prev","Math","max","from","_","i","pageNumber","min"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/NonPharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage] = useState(10);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [currentProduct, setCurrentProduct] = useState(null);\r\n\r\n    // Function to handle opening the modal\r\n    const handleOpenModal = () => {\r\n        // Check if dropdown data is loaded\r\n        if (categories.length === 0 || companies.length === 0) {\r\n            // If data isn't loaded yet, fetch it first\r\n            fetchDropdownData();\r\n            toast.info(\"Loading form data...\");\r\n        }\r\n        document.getElementById('create-new-product').checked = true;\r\n    };\r\n\r\n    // Function to handle opening the edit modal\r\n    const handleOpenEditModal = async (productId) => {\r\n        try {\r\n            // Fetch the product directly from the API to ensure we have the latest data\r\n            const response = await fetch(`${API_BASE_URL}/${productId}`);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch product: ${response.status}`);\r\n            }\r\n            \r\n            const productData = await response.json();\r\n            const productToEdit = productData.data || productData;\r\n            \r\n            setCurrentProduct(productToEdit);\r\n            \r\n            // Check if dropdown data is loaded\r\n            if (categories.length === 0 || companies.length === 0) {\r\n                fetchDropdownData();\r\n            }\r\n            \r\n            document.getElementById('edit-product').checked = true;\r\n        } catch (error) {\r\n            console.error('Error fetching product for edit:', error);\r\n            toast.error(`Could not load product: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Function to handle refresh\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    // Separate function to fetch dropdown data\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`)\r\n            ]);\r\n            \r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n            \r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    // Fetch paginated products\r\n    const fetchProducts = async (page = 1, limit = productsPerPage) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setNonPharmacyProducts(data.data);\r\n                setTotalProducts(data.totalItems);\r\n                setTotalPages(data.totalPages);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n    };\r\n\r\n    // Fetch products when the page changes\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    // Function to handle form submission for creating a new product\r\n    const handleCreateProduct = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        // Convert numeric fields to numbers\r\n        ['Price', 'Discount', 'Stock', 'Pack_TP', 'Pack_MRP'].forEach(field => {\r\n            if (productDetails[field]) {\r\n                productDetails[field] = Number(productDetails[field]);\r\n            }\r\n        });\r\n        \r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            if (response.ok) {\r\n                toast.success('Product created successfully');\r\n                document.getElementById('create-new-product').checked = false;\r\n                event.target.reset();\r\n                fetchProducts(currentPage, productsPerPage);\r\n            } else {\r\n                const errorData = await response.json();\r\n                toast.error(`Failed to create product: ${errorData.message || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating product:', error);\r\n            toast.error(`Error creating product: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Function to handle product update\r\n    const handleProductUpdate = async (e) => {\r\n        e.preventDefault();\r\n        console.log(\"Form submitted\");\r\n        \r\n        if (!currentProduct) {\r\n            toast.error('No product selected for update');\r\n            return;\r\n        }\r\n        \r\n        // Collect form data\r\n        const formData = new FormData(e.target);\r\n        const productData = Object.fromEntries(formData.entries());\r\n        \r\n        // Convert numeric fields\r\n        ['Price', 'Discount', 'Stock', 'Pack_TP', 'Pack_MRP', 'Unit_TP', 'Unit_MRP'].forEach(field => {\r\n            if (productData[field]) {\r\n                productData[field] = Number(productData[field]);\r\n            }\r\n        });\r\n        \r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(productData),\r\n            });\r\n            \r\n            console.log(\"Update response status:\", response.status);\r\n            \r\n            if (response.ok) {\r\n                toast.success(\"Product updated successfully\");\r\n                document.getElementById('edit-product').checked = false;\r\n                fetchProducts(currentPage, productsPerPage);\r\n            } else {\r\n                const errorText = await response.text();\r\n                console.error(\"Update failed:\", errorText);\r\n                toast.error(`Update failed: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Update error:\", error);\r\n            toast.error(`Error: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className='dashboard-section'>\r\n            <div className='flex justify-between items-center mb-4'>\r\n                <DashboardPageHeading headingText={'Non-Pharmacy Products'} />\r\n                <div className='flex gap-2'>\r\n                    <PrintButton />\r\n                    <RefreshButton onClick={handleRefresh} />\r\n                    <NewButton onClick={handleOpenModal} />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Create New Product Modal */}\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"create-new-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'create-new-product'} />\r\n                    <ModalHeading modalHeading={'Create New Non-Pharmacy Product'} />\r\n                    <form onSubmit={handleCreateProduct}>\r\n                        <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                            <Input title={'Product Name'} type='text' name='Product_name' required />\r\n                            <Input title={'Code'} type='text' name='Code' />\r\n                            <Select \r\n                                title={'Category'} \r\n                                name='Category' \r\n                                isRequired='required' \r\n                                options={categories.map(c => c.Name)} \r\n                            />\r\n                            <Select \r\n                                title={'Company'} \r\n                                name='Company' \r\n                                isRequired='required' \r\n                                options={companies.map(c => c.Name)} \r\n                            />\r\n                            <Input title={'Stock'} type='text' name='Stock' required />\r\n                            <Input title={'Pack Type'} type='text' name='Pack_Type' />\r\n                            <Input title={'Pack Size'} type='text' name='Pack_Size' />\r\n                            <DoubleInput \r\n                                title1={'Pack TP'} \r\n                                type1='number' \r\n                                name1='Pack_TP' \r\n                                title2={'Pack MRP'} \r\n                                type2='number' \r\n                                name2='Pack_MRP' \r\n                            />\r\n                            <DoubleInput \r\n                                title1={'Unit TP'} \r\n                                type1='number' \r\n                                name1='Unit_TP' \r\n                                title2={'Unit MRP'} \r\n                                type2='number' \r\n                                name2='Unit_MRP' \r\n                            />\r\n                            <textarea\r\n                                className=\"textarea textarea-bordered col-span-3\"\r\n                                placeholder=\"Description\"\r\n                                name=\"Strength\"\r\n                                rows={4}\r\n                            ></textarea>\r\n                        </div>\r\n                        <div className=\"flex gap-2 mt-4\">\r\n                            <SaveButton extraClass={''} />\r\n                            <CancelButton modalId={'create-new-product'} />\r\n                        </div>\r\n                    </form>\r\n                </label>\r\n            </label>\r\n\r\n            {/* Edit Product Modal */}\r\n            <input type=\"checkbox\" id=\"edit-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"edit-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'edit-product'} />\r\n                    <ModalHeading modalHeading={'Edit Non-Pharmacy Product'} />\r\n                    {currentProduct && (\r\n                        <form onSubmit={handleProductUpdate}>\r\n                            <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                                <Input \r\n                                    title={'Product Name'} \r\n                                    type='text' \r\n                                    name='Product_name' \r\n                                    defaultValue={currentProduct.Product_name} \r\n                                    required \r\n                                />\r\n                                <Input \r\n                                    title={'Code'} \r\n                                    type='text' \r\n                                    name='Code' \r\n                                    defaultValue={currentProduct.Code} \r\n                                />\r\n                                <Select \r\n                                    title={'Category'} \r\n                                    name='Category' \r\n                                    isRequired='required' \r\n                                    options={categories.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.Category}\r\n                                />\r\n                                <Select \r\n                                    title={'Company'} \r\n                                    name='Company' \r\n                                    isRequired='required' \r\n                                    options={companies.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.Company}\r\n                                />\r\n                                <Input \r\n                                    title={'Stock'} \r\n                                    type='text' \r\n                                    name='Stock' \r\n                                    defaultValue={currentProduct.Stock} \r\n                                    required \r\n                                />\r\n                                <Input \r\n                                    title={'Pack Type'} \r\n                                    type='text' \r\n                                    name='Pack_Type' \r\n                                    defaultValue={currentProduct.Pack_Type} \r\n                                />\r\n                                <Input \r\n                                    title={'Pack Size'} \r\n                                    type='text' \r\n                                    name='Pack_Size' \r\n                                    defaultValue={currentProduct.Pack_Size} \r\n                                />\r\n                                <DoubleInput \r\n                                    title1={'Pack TP'} \r\n                                    type1='number' \r\n                                    name1='Pack_TP' \r\n                                    defaultValue1={currentProduct.Pack_TP}\r\n                                    title2={'Pack MRP'} \r\n                                    type2='number' \r\n                                    name2='Pack_MRP' \r\n                                    defaultValue2={currentProduct.Pack_MRP}\r\n                                />\r\n                                <DoubleInput \r\n                                    title1={'Unit TP'} \r\n                                    type1='number' \r\n                                    name1='Unit_TP' \r\n                                    defaultValue1={currentProduct.Unit_TP}\r\n                                    title2={'Unit MRP'} \r\n                                    type2='number' \r\n                                    name2='Unit_MRP' \r\n                                    defaultValue2={currentProduct.Unit_MRP}\r\n                                />\r\n                                <textarea\r\n                                    className=\"textarea textarea-bordered col-span-3\"\r\n                                    placeholder=\"Description\"\r\n                                    name=\"Strength\"\r\n                                    defaultValue={currentProduct.Strength}\r\n                                    rows={4}\r\n                                ></textarea>\r\n                            </div>\r\n                            <div className=\"flex gap-2 mt-4\">\r\n                                <SaveButton extraClass={''} />\r\n                                <CancelButton modalId={'edit-product'} />\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </label>\r\n            </label>\r\n\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {nonPharmacyProducts.length > 0 ? (\r\n                        nonPharmacyProducts.map((product, index) => (\r\n                            <TableRow\r\n                                key={product._id}\r\n                                tableRowsData={[\r\n                                    (currentPage - 1) * productsPerPage + index + 1,\r\n                                    product.Product_name,\r\n                                    product.Category,\r\n                                    product.Company,\r\n                                    product.Stock,\r\n                                    product.Pack_Type,\r\n                                    <span className='flex items-center gap-x-1'>\r\n                                        <EditButton \r\n                                            id={product._id} \r\n                                            onClick={handleOpenEditModal} \r\n                                        />\r\n                                        <DeleteButton\r\n                                            deleteApiLink={`${API_BASE_URL}/${product._id}`}\r\n                                            itemId={product._id}\r\n                                            name={product.Product_name}\r\n                                            onDelete={() => fetchProducts(currentPage, productsPerPage)}\r\n                                        />\r\n                                    </span>\r\n                                ]}\r\n                            />\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"7\" className=\"text-center py-4\">No products found</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            {totalPages > 0 && (\r\n                <div className='pagination mt-4 flex justify-center gap-2'>\r\n                    {/* Previous Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                        disabled={currentPage === 1}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Previous\r\n                    </button>\r\n\r\n                    {/* First Page Button */}\r\n                    {currentPage > 1 && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(1)}\r\n                            className={`btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`}\r\n                        >\r\n                            1\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Ellipsis for Skipped Pages */}\r\n                    {currentPage > 2 && <span className='btn btn-sm btn-disabled'>...</span>}\r\n\r\n                    {/* Middle Pages */}\r\n                    {Array.from({ length: totalPages }, (_, i) => {\r\n                        const pageNumber = i + 1;\r\n                        // Show only a subset of pages around the current page\r\n                        if (pageNumber >= currentPage - 2 && pageNumber <= currentPage + 2) {\r\n                            return (\r\n                                <button\r\n                                    key={i}\r\n                                    onClick={() => setCurrentPage(pageNumber)}\r\n                                    className={`btn btn-sm ${currentPage === pageNumber ? 'btn-active' : ''}`}\r\n                                >\r\n                                    {pageNumber}\r\n                                </button>\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n\r\n                    {/* Ellipsis for Skipped Pages */}\r\n                    {currentPage < totalPages - 2 && <span className='btn btn-sm btn-disabled'>...</span>}\r\n\r\n                    {/* Last Page Button */}\r\n                    {currentPage < totalPages && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(totalPages)}\r\n                            className={`btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`}\r\n                        >\r\n                            {totalPages}\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Next Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                        disabled={currentPage === totalPages}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}