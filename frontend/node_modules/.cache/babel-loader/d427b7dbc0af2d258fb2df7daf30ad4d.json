{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\NonPharmacyProducts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\n\nconst NonPharmacyProducts = () => {\n  _s();\n\n  const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentProduct, setCurrentProduct] = useState(null); // Function to handle opening the modal\n\n  const handleOpenModal = () => {\n    // Check if dropdown data is loaded\n    if (categories.length === 0 || companies.length === 0) {\n      // If data isn't loaded yet, fetch it first\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  }; // Function to handle refresh\n\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  }; // Separate function to fetch dropdown data\n\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  }; // Fetch paginated products\n\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\n      const data = await response.json();\n\n      if (response.ok) {\n        setNonPharmacyProducts(data.data);\n        setTotalProducts(data.totalItems);\n        setTotalPages(data.totalPages);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    }\n  }; // Fetch products when the page changes\n\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]); // Fetch dropdown data when component mounts\n\n  useEffect(() => {\n    fetchDropdownData();\n  }, []);\n\n  const addNonPharmacyProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries()); // Check for required fields\n\n    const requiredFields = ['tradeName', 'Category', 'Company', 'Stock'];\n    const missingFields = requiredFields.filter(field => !productDetails[field]);\n\n    if (missingFields.length > 0) {\n      toast.error(`Missing required fields: ${missingFields.join(', ')}`);\n      return;\n    } // Add metadata\n\n\n    productDetails.addedBy = 'admin';\n    productDetails.addedToDbAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        // Close the modal\n        document.getElementById('create-new-product').checked = false; // Show success message\n\n        toast.success( /*#__PURE__*/_jsxDEV(AddModal, {\n          name: productDetails.Product_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 31\n        }, this)); // Refresh the product list\n\n        fetchProducts(currentPage, productsPerPage);\n      } else {\n        console.error('Error adding product:', data);\n        toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    } // Reset the form\n\n\n    event.target.reset();\n  }; // Function to render category options\n\n\n  const renderCategoryOptions = () => {\n    return categories.map(category => category.Name);\n  }; // Function to render company options\n\n\n  const renderCompanyOptions = () => {\n    return companies.map(company => company.Name);\n  };\n\n  const handleProductUpdate = async updatedProduct => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${updatedProduct._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProduct)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        toast.success('Product updated successfully');\n        fetchProducts(currentPage, productsPerPage); // Refresh the list\n      } else {\n        toast.error(`Failed to update product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    }\n  };\n\n  const updateNonPharmacyProduct = async event => {\n    console.log(\"Form submitted\", event);\n    event.preventDefault();\n\n    if (!currentProduct) {\n      console.error(\"No current product found\");\n      toast.error('No product selected for update');\n      return;\n    }\n\n    console.log(\"Current product:\", currentProduct);\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries());\n    console.log(\"Form data collected:\", productDetails); // Convert numeric fields to numbers\n\n    ['Price', 'Discount', 'Stock', 'Pack_TP', 'Pack_MRP', 'Unit_TP', 'Unit_MRP', 'purchaseDiscountPercent', 'purchaseDiscountTaka', 'purchaseVatPercent', 'purchaseVatTaka', 'salesDiscountPercent', 'salesDiscountTaka', 'salesVatPercent', 'salesVatTaka'].forEach(field => {\n      if (productDetails[field]) {\n        productDetails[field] = Number(productDetails[field]);\n      }\n    }); // Add metadata\n\n    productDetails.updatedBy = 'admin';\n    productDetails.updatedAt = new Date().toISOString();\n    console.log(\"Sending update request with data:\", productDetails);\n\n    try {\n      console.log(`Sending PUT request to: ${API_BASE_URL}/${currentProduct._id}`);\n      const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      console.log(\"Response received:\", response);\n\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log(\"Success response data:\", responseData);\n        toast.success('Product updated successfully');\n        document.getElementById('edit-product').checked = false;\n        fetchProducts(currentPage, productsPerPage);\n        setCurrentProduct(null);\n      } else {\n        const errorData = await response.json();\n        console.error(\"Error response data:\", errorData);\n        toast.error(`Failed to update product: ${errorData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n      toast.error(`Error updating product: ${error.message}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"p-4 mt-16\",\n    children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n      name: \"Non-Pharmacy Products\",\n      value: totalProducts,\n      buttons: [/*#__PURE__*/_jsxDEV(NewButton, {\n        modalId: \"create-new-product\",\n        onClick: handleOpenModal\n      }, \"new-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n        onClick: handleRefresh\n      }, \"refresh-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PrintButton, {}, \"print-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"create-new-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'create-new-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Create a Non-Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addNonPharmacyProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Product Name',\n              type: \"text\",\n              name: \"Product_name\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"Category\",\n              isRequired: \"required\",\n              options: renderCategoryOptions()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"Company\",\n              isRequired: \"required\",\n              options: renderCompanyOptions()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Description',\n              type: \"text\",\n              name: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Stock',\n              type: \"number\",\n              name: \"Stock\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Type',\n              type: \"text\",\n              name: \"Pack_Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Price',\n              type1: \"number\",\n              name1: \"Price\",\n              title2: 'Discount',\n              type2: \"number\",\n              name2: \"Discount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Status',\n              name: \"Status\",\n              options: ['Active', 'Inactive'],\n              defaultValue: \"Active\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n              extraClass: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'create-new-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"edit-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"edit-product\",\n      className: \"modal cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\",\n        htmlFor: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: 'edit-product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          modalHeading: 'Edit Non-Pharmacy Product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this), currentProduct && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: updateNonPharmacyProduct,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              title: 'Product Name',\n              type: \"text\",\n              name: \"Product_name\",\n              defaultValue: currentProduct.Product_name,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Code',\n              type: \"text\",\n              name: \"Code\",\n              defaultValue: currentProduct.Code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Category',\n              name: \"Category\",\n              isRequired: \"required\",\n              options: categories.map(c => c.Name),\n              defaultValue: currentProduct.Category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              title: 'Company',\n              name: \"Company\",\n              isRequired: \"required\",\n              options: companies.map(c => c.Name),\n              defaultValue: currentProduct.Company\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Stock',\n              type: \"text\",\n              name: \"Stock\",\n              defaultValue: currentProduct.Stock,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Type',\n              type: \"text\",\n              name: \"Pack_Type\",\n              defaultValue: currentProduct.Pack_Type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              title: 'Pack Size',\n              type: \"text\",\n              name: \"Pack_Size\",\n              defaultValue: currentProduct.Pack_Size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Pack TP',\n              type1: \"number\",\n              name1: \"Pack_TP\",\n              defaultValue1: currentProduct.Pack_TP,\n              title2: 'Pack MRP',\n              type2: \"number\",\n              name2: \"Pack_MRP\",\n              defaultValue2: currentProduct.Pack_MRP\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              title1: 'Unit TP',\n              type1: \"number\",\n              name1: \"Unit_TP\",\n              defaultValue1: currentProduct.Unit_TP,\n              title2: 'Unit MRP',\n              type2: \"number\",\n              name2: \"Unit_MRP\",\n              defaultValue2: currentProduct.Unit_MRP\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"textarea textarea-bordered col-span-3\",\n              placeholder: \"Description\",\n              name: \"Strength\",\n              defaultValue: currentProduct.Strength,\n              rows: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n              onClick: e => {\n                console.log(\"Save button clicked\"); // Don't prevent default here, let the form submission happen\n              },\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: 'edit-product'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: nonPharmacyProducts.length > 0 ? nonPharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.tradeName, product.Category, product.Company, product.Stock, product.Pack_Type, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex items-center gap-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(EditButton, {\n              id: product._id,\n              apiEndpoint: \"nonPharmacy\",\n              tradeName: product.tradeName,\n              genericName: \"N/A\" // Default value since NonPharmacy has no generic name\n              ,\n              strength: product.Strength,\n              category: product.Category,\n              company: product.Company,\n              stock: product.Stock,\n              packType: product.Pack_Type,\n              onSave: handleProductUpdate // Call this function when Save is clicked\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n              deleteApiLink: `${API_BASE_URL}/${product._id}`,\n              itemId: product._id,\n              name: product.Product_name,\n              onDelete: () => fetchProducts(currentPage, productsPerPage)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 37\n          }, this)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"9\",\n            className: \"text-center py-4\",\n            children: \"No products found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination mt-4 flex justify-center gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.max(prev - 1, 1)),\n        disabled: currentPage === 1,\n        className: \"btn btn-sm\",\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 21\n      }, this), currentPage > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(1),\n        className: `btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`,\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 25\n      }, this), currentPage > 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"btn btn-sm btn-disabled\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 41\n      }, this), Array.from({\n        length: totalPages\n      }, (_, i) => {\n        const pageNumber = i + 1; // Show only a subset of pages around the current page\n\n        if (pageNumber >= currentPage - 2 && pageNumber <= currentPage + 2) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentPage(pageNumber),\n            className: `btn btn-sm ${currentPage === pageNumber ? 'btn-active' : ''}`,\n            children: pageNumber\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 33\n          }, this);\n        }\n\n        return null;\n      }), currentPage < totalPages - 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"btn btn-sm btn-disabled\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 54\n      }, this), currentPage < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(totalPages),\n        className: `btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`,\n        children: totalPages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(prev => Math.min(prev + 1, totalPages)),\n        disabled: currentPage === totalPages,\n        className: \"btn btn-sm\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NonPharmacyProducts, \"wYApMQIHGQ62l33RPzJP70/gCvE=\");\n\n_c = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","NonPharmacyProducts","nonPharmacyProducts","setNonPharmacyProducts","categories","setCategories","companies","setCompanies","currentPage","setCurrentPage","productsPerPage","totalProducts","setTotalProducts","totalPages","setTotalPages","isModalOpen","setIsModalOpen","currentProduct","setCurrentProduct","handleOpenModal","length","fetchDropdownData","info","document","getElementById","checked","handleRefresh","fetchProducts","categoriesRes","companiesRes","Promise","all","fetch","ok","categoriesData","json","Array","isArray","data","error","companiesData","page","limit","response","totalItems","console","addNonPharmacyProduct","event","preventDefault","formData","FormData","target","productDetails","Object","fromEntries","entries","requiredFields","missingFields","filter","field","join","addedBy","addedToDbAt","Date","toISOString","method","headers","body","JSON","stringify","success","Product_name","reset","renderCategoryOptions","map","category","Name","renderCompanyOptions","company","handleProductUpdate","updatedProduct","_id","updateNonPharmacyProduct","log","forEach","Number","updatedBy","updatedAt","responseData","errorData","message","Code","c","Category","Company","Stock","Pack_Type","Pack_Size","Pack_TP","Pack_MRP","Unit_TP","Unit_MRP","Strength","e","item","index","product","tradeName","prev","Math","max","from","_","i","pageNumber","min"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/NonPharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage] = useState(10);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [currentProduct, setCurrentProduct] = useState(null);\r\n\r\n    // Function to handle opening the modal\r\n    const handleOpenModal = () => {\r\n        // Check if dropdown data is loaded\r\n        if (categories.length === 0 || companies.length === 0) {\r\n            // If data isn't loaded yet, fetch it first\r\n            fetchDropdownData();\r\n            toast.info(\"Loading form data...\");\r\n        }\r\n        document.getElementById('create-new-product').checked = true;\r\n    };\r\n\r\n    // Function to handle refresh\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    // Separate function to fetch dropdown data\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`)\r\n            ]);\r\n            \r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n            \r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    // Fetch paginated products\r\n    const fetchProducts = async (page = 1, limit = productsPerPage) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}?page=${page}&limit=${limit}`);\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setNonPharmacyProducts(data.data);\r\n                setTotalProducts(data.totalItems);\r\n                setTotalPages(data.totalPages);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n    };\r\n\r\n    // Fetch products when the page changes\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    const addNonPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        // Check for required fields\r\n        const requiredFields = ['tradeName', 'Category', 'Company', 'Stock'];\r\n        const missingFields = requiredFields.filter(field => !productDetails[field]);\r\n        \r\n        if (missingFields.length > 0) {\r\n            toast.error(`Missing required fields: ${missingFields.join(', ')}`);\r\n            return;\r\n        }\r\n        \r\n        // Add metadata\r\n        productDetails.addedBy = 'admin';\r\n        productDetails.addedToDbAt = new Date().toISOString();\r\n\r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(productDetails)\r\n            });\r\n            \r\n            const data = await response.json();\r\n            \r\n            if (response.ok) {\r\n                // Close the modal\r\n                document.getElementById('create-new-product').checked = false;\r\n                \r\n                // Show success message\r\n                toast.success(<AddModal name={productDetails.Product_name} />);\r\n                \r\n                // Refresh the product list\r\n                fetchProducts(currentPage, productsPerPage);\r\n            } else {\r\n                console.error('Error adding product:', data);\r\n                toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n        \r\n        // Reset the form\r\n        event.target.reset();\r\n    };\r\n\r\n    // Function to render category options\r\n    const renderCategoryOptions = () => {\r\n        return categories.map(category => category.Name);\r\n    };\r\n\r\n    // Function to render company options\r\n    const renderCompanyOptions = () => {\r\n        return companies.map(company => company.Name);\r\n    };\r\n\r\n    const handleProductUpdate = async (updatedProduct) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/${updatedProduct._id}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(updatedProduct)\r\n            });\r\n    \r\n            const data = await response.json();\r\n            \r\n            if (response.ok) {\r\n                toast.success('Product updated successfully');\r\n                fetchProducts(currentPage, productsPerPage); // Refresh the list\r\n            } else {\r\n                toast.error(`Failed to update product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n    };\r\n\r\n    const updateNonPharmacyProduct = async (event) => {\r\n        console.log(\"Form submitted\", event);\r\n        event.preventDefault();\r\n        \r\n        if (!currentProduct) {\r\n            console.error(\"No current product found\");\r\n            toast.error('No product selected for update');\r\n            return;\r\n        }\r\n        \r\n        console.log(\"Current product:\", currentProduct);\r\n        \r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        console.log(\"Form data collected:\", productDetails);\r\n        \r\n        // Convert numeric fields to numbers\r\n        ['Price', 'Discount', 'Stock', 'Pack_TP', 'Pack_MRP', 'Unit_TP', 'Unit_MRP',\r\n         'purchaseDiscountPercent', 'purchaseDiscountTaka', 'purchaseVatPercent', 'purchaseVatTaka',\r\n         'salesDiscountPercent', 'salesDiscountTaka', 'salesVatPercent', 'salesVatTaka'].forEach(field => {\r\n            if (productDetails[field]) {\r\n                productDetails[field] = Number(productDetails[field]);\r\n            }\r\n        });\r\n        \r\n        // Add metadata\r\n        productDetails.updatedBy = 'admin';\r\n        productDetails.updatedAt = new Date().toISOString();\r\n        \r\n        console.log(\"Sending update request with data:\", productDetails);\r\n        \r\n        try {\r\n            console.log(`Sending PUT request to: ${API_BASE_URL}/${currentProduct._id}`);\r\n            \r\n            const response = await fetch(`${API_BASE_URL}/${currentProduct._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            console.log(\"Response received:\", response);\r\n            \r\n            if (response.ok) {\r\n                const responseData = await response.json();\r\n                console.log(\"Success response data:\", responseData);\r\n                \r\n                toast.success('Product updated successfully');\r\n                document.getElementById('edit-product').checked = false;\r\n                fetchProducts(currentPage, productsPerPage);\r\n                setCurrentProduct(null);\r\n            } else {\r\n                const errorData = await response.json();\r\n                console.error(\"Error response data:\", errorData);\r\n                \r\n                toast.error(`Failed to update product: ${errorData.message || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating product:', error);\r\n            toast.error(`Error updating product: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className='p-4 mt-16'>\r\n            <DashboardPageHeading\r\n                name='Non-Pharmacy Products'\r\n                value={totalProducts}\r\n                buttons={[\r\n                    <NewButton key=\"new-button\" modalId='create-new-product' onClick={handleOpenModal} />,\r\n                    <RefreshButton key=\"refresh-button\" onClick={handleRefresh} />,\r\n                    <PrintButton key=\"print-button\" />\r\n                ]}\r\n            />\r\n\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"create-new-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'create-new-product'} />\r\n                    <ModalHeading modalHeading={'Create a Non-Pharmacy Product'} />\r\n                    <form onSubmit={addNonPharmacyProduct}>\r\n                        <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                            <Input title={'Product Name'} type='text' name='Product_name' required />\r\n                            <Select title={'Category'} name='Category' isRequired='required' options={renderCategoryOptions()} />\r\n                            <Select title={'Company'} name='Company' isRequired='required' options={renderCompanyOptions()} />\r\n                            <Input title={'Description'} type='text' name='Description' />\r\n                            <Input title={'Stock'} type='number' name='Stock' required />\r\n                            <Input title={'Pack Type'} type='text' name='Pack_Type' />\r\n                            <DoubleInput \r\n                                title1={'Price'} \r\n                                type1='number' \r\n                                name1='Price' \r\n                                title2={'Discount'} \r\n                                type2='number' \r\n                                name2='Discount' \r\n                            />\r\n                            <Select \r\n                                title={'Status'} \r\n                                name='Status' \r\n                                options={['Active', 'Inactive']} \r\n                                defaultValue='Active'\r\n                            />\r\n                        </div>\r\n                        <div className=\"flex gap-2 mt-4\">\r\n                            <SaveButton extraClass={''} />\r\n                            <CancelButton modalId={'create-new-product'} />\r\n                        </div>\r\n                    </form>\r\n                </label>\r\n            </label>\r\n\r\n            <input type=\"checkbox\" id=\"edit-product\" className=\"modal-toggle\" />\r\n            <label htmlFor=\"edit-product\" className=\"modal cursor-pointer\">\r\n                <label className=\"modal-box lg:w-7/12 md:w-10/12 w-11/12 max-w-4xl relative\" htmlFor=\"\">\r\n                    <ModalCloseButton modalId={'edit-product'} />\r\n                    <ModalHeading modalHeading={'Edit Non-Pharmacy Product'} />\r\n                    {currentProduct && (\r\n                        <form onSubmit={updateNonPharmacyProduct}>\r\n                            <div className='grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-2 mb-2'>\r\n                                <Input \r\n                                    title={'Product Name'} \r\n                                    type='text' \r\n                                    name='Product_name' \r\n                                    defaultValue={currentProduct.Product_name} \r\n                                    required \r\n                                />\r\n                                <Input \r\n                                    title={'Code'} \r\n                                    type='text' \r\n                                    name='Code' \r\n                                    defaultValue={currentProduct.Code} \r\n                                />\r\n                                <Select \r\n                                    title={'Category'} \r\n                                    name='Category' \r\n                                    isRequired='required' \r\n                                    options={categories.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.Category}\r\n                                />\r\n                                <Select \r\n                                    title={'Company'} \r\n                                    name='Company' \r\n                                    isRequired='required' \r\n                                    options={companies.map(c => c.Name)} \r\n                                    defaultValue={currentProduct.Company}\r\n                                />\r\n                                <Input \r\n                                    title={'Stock'} \r\n                                    type='text' \r\n                                    name='Stock' \r\n                                    defaultValue={currentProduct.Stock} \r\n                                    required \r\n                                />\r\n                                <Input \r\n                                    title={'Pack Type'} \r\n                                    type='text' \r\n                                    name='Pack_Type' \r\n                                    defaultValue={currentProduct.Pack_Type} \r\n                                />\r\n                                <Input \r\n                                    title={'Pack Size'} \r\n                                    type='text' \r\n                                    name='Pack_Size' \r\n                                    defaultValue={currentProduct.Pack_Size} \r\n                                />\r\n                                <DoubleInput \r\n                                    title1={'Pack TP'} \r\n                                    type1='number' \r\n                                    name1='Pack_TP' \r\n                                    defaultValue1={currentProduct.Pack_TP}\r\n                                    title2={'Pack MRP'} \r\n                                    type2='number' \r\n                                    name2='Pack_MRP' \r\n                                    defaultValue2={currentProduct.Pack_MRP}\r\n                                />\r\n                                <DoubleInput \r\n                                    title1={'Unit TP'} \r\n                                    type1='number' \r\n                                    name1='Unit_TP' \r\n                                    defaultValue1={currentProduct.Unit_TP}\r\n                                    title2={'Unit MRP'} \r\n                                    type2='number' \r\n                                    name2='Unit_MRP' \r\n                                    defaultValue2={currentProduct.Unit_MRP}\r\n                                />\r\n                                <textarea\r\n                                    className=\"textarea textarea-bordered col-span-3\"\r\n                                    placeholder=\"Description\"\r\n                                    name=\"Strength\"\r\n                                    defaultValue={currentProduct.Strength}\r\n                                    rows={4}\r\n                                ></textarea>\r\n                            </div>\r\n                            <div className=\"flex gap-2 mt-4\">\r\n                                <button \r\n                                    type=\"submit\" \r\n                                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\"\r\n                                    onClick={(e) => {\r\n                                        console.log(\"Save button clicked\");\r\n                                        // Don't prevent default here, let the form submission happen\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                                <CancelButton modalId={'edit-product'} />\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </label>\r\n            </label>\r\n\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {nonPharmacyProducts.length > 0 ? (\r\n                        nonPharmacyProducts.map((product, index) => (\r\n                            <TableRow\r\n                                key={product._id}\r\n                                tableRowsData={[\r\n                                    (currentPage - 1) * productsPerPage + index + 1,\r\n                                    product.tradeName,\r\n                                    product.Category,\r\n                                    product.Company,\r\n                                    product.Stock,\r\n                                    product.Pack_Type,\r\n                                    <span className='flex items-center gap-x-1'>\r\n                                        <EditButton \r\n                                            id={product._id} \r\n                                            apiEndpoint=\"nonPharmacy\" \r\n                                            tradeName={product.tradeName} \r\n                                            genericName={\"N/A\"}  // Default value since NonPharmacy has no generic name\r\n                                            strength={product.Strength} \r\n                                            category={product.Category} \r\n                                            company={product.Company} \r\n                                            stock={product.Stock} \r\n                                            packType={product.Pack_Type} \r\n                                            onSave={handleProductUpdate}  // Call this function when Save is clicked\r\n                                        />\r\n                                        <DeleteButton\r\n                                            deleteApiLink={`${API_BASE_URL}/${product._id}`}\r\n                                            itemId={product._id}\r\n                                            name={product.Product_name}\r\n                                            onDelete={() => fetchProducts(currentPage, productsPerPage)}\r\n                                        />\r\n                                    </span>\r\n                                ]}\r\n                            />\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"9\" className=\"text-center py-4\">No products found</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            {totalPages > 0 && (\r\n                <div className='pagination mt-4 flex justify-center gap-2'>\r\n                    {/* Previous Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                        disabled={currentPage === 1}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Previous\r\n                    </button>\r\n\r\n                    {/* First Page Button */}\r\n                    {currentPage > 1 && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(1)}\r\n                            className={`btn btn-sm ${currentPage === 1 ? 'btn-active' : ''}`}\r\n                        >\r\n                            1\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Ellipsis for Skipped Pages */}\r\n                    {currentPage > 2 && <span className='btn btn-sm btn-disabled'>...</span>}\r\n\r\n                    {/* Middle Pages */}\r\n                    {Array.from({ length: totalPages }, (_, i) => {\r\n                        const pageNumber = i + 1;\r\n                        // Show only a subset of pages around the current page\r\n                        if (pageNumber >= currentPage - 2 && pageNumber <= currentPage + 2) {\r\n                            return (\r\n                                <button\r\n                                    key={i}\r\n                                    onClick={() => setCurrentPage(pageNumber)}\r\n                                    className={`btn btn-sm ${currentPage === pageNumber ? 'btn-active' : ''}`}\r\n                                >\r\n                                    {pageNumber}\r\n                                </button>\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n\r\n                    {/* Ellipsis for Skipped Pages */}\r\n                    {currentPage < totalPages - 2 && <span className='btn btn-sm btn-disabled'>...</span>}\r\n\r\n                    {/* Last Page Button */}\r\n                    {currentPage < totalPages && (\r\n                        <button\r\n                            onClick={() => setCurrentPage(totalPages)}\r\n                            className={`btn btn-sm ${currentPage === totalPages ? 'btn-active' : ''}`}\r\n                        >\r\n                            {totalPages}\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Next Button */}\r\n                    <button\r\n                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                        disabled={currentPage === totalPages}\r\n                        className='btn btn-sm'\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}