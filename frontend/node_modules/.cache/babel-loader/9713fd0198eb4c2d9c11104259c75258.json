{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\NonPharmacyProducts.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy'; // Custom EditButton component for NonPharmacy products\n\nconst EditNonPharmacyButton = _ref => {\n  _s();\n\n  let {\n    id,\n    onUpdate,\n    initialData\n  } = _ref;\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const modalId = `edit-product-${id}`; // Fetch dropdown data when component mounts\n\n  useEffect(() => {\n    const fetchDropdownData = async () => {\n      try {\n        const [categoriesRes, companiesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`)]);\n\n        if (categoriesRes.ok) {\n          const categoriesData = await categoriesRes.json();\n\n          if (Array.isArray(categoriesData)) {\n            setCategories(categoriesData);\n          } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n            setCategories(categoriesData.data);\n          }\n        }\n\n        if (companiesRes.ok) {\n          const companiesData = await companiesRes.json();\n\n          if (Array.isArray(companiesData)) {\n            setCompanies(companiesData);\n          } else if (companiesData.data && Array.isArray(companiesData.data)) {\n            setCompanies(companiesData.data);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching dropdown data:', error);\n      }\n    };\n\n    fetchDropdownData();\n  }, []);\n\n  const handleUpdate = event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries());\n    console.log(\"Updating product with ID:\", id);\n    console.log(\"Update data:\", productDetails); // Create a simple update object with just the fields we want to update\n\n    const apiData = {\n      $set: {\n        // Use MongoDB $set operator to update only specified fields\n        Product_name: productDetails.Product_name,\n        Category: productDetails.Category,\n        Company: productDetails.Company,\n        Stock: productDetails.Stock,\n        Pack_Type: productDetails.Pack_Type,\n        Pack_TP: parseFloat(productDetails.Pack_TP),\n        Pack_MRP: parseFloat(productDetails.Pack_MRP),\n        updatedAt: new Date().toISOString() // Add timestamp to force update\n\n      }\n    };\n    console.log(\"MongoDB update object:\", apiData); // Use the standard PUT endpoint as defined in the backend\n\n    fetch(`${API_BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(apiData)\n    }).then(response => {\n      console.log(\"PUT response status:\", response.status);\n\n      if (!response.ok) {\n        return response.text().then(text => {\n          console.error(\"PUT error response:\", text);\n          throw new Error('Update failed: ' + text);\n        });\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(\"PUT successful, API response:\", data);\n      toast.success(`Product updated successfully`);\n      document.getElementById(modalId).checked = false; // Force a refresh of the product list with a longer delay\n\n      if (onUpdate) {\n        console.log(\"Triggering product list refresh with delay\");\n        setTimeout(() => onUpdate(), 1000); // Longer delay to ensure database update\n      }\n    }).catch(error => {\n      console.error('Error in PUT:', error);\n      toast.error('Failed to update product: ' + error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EditButton, {\n      modalId: modalId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: modalId,\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box relative\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: modalId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          text: `Edit Product: ${(initialData === null || initialData === void 0 ? void 0 : initialData.Product_name) || ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleUpdate,\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: \"Product Name\",\n            name: \"Product_name\",\n            placeholder: \"Enter product name\",\n            defaultValue: (initialData === null || initialData === void 0 ? void 0 : initialData.Product_name) || '',\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"Category\",\n            options: categories.map(cat => cat.name || cat),\n            defaultValue: (initialData === null || initialData === void 0 ? void 0 : initialData.Category) || '',\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Company\",\n            name: \"Company\",\n            options: companies.map(comp => comp.name || comp),\n            defaultValue: (initialData === null || initialData === void 0 ? void 0 : initialData.Company) || '',\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Stock\",\n            name: \"Stock\",\n            placeholder: \"Enter stock quantity\",\n            defaultValue: (initialData === null || initialData === void 0 ? void 0 : initialData.Stock) || '',\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Pack Type\",\n            name: \"Pack_Type\",\n            placeholder: \"Enter pack type\",\n            defaultValue: (initialData === null || initialData === void 0 ? void 0 : initialData.Pack_Type) || ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n            label1: \"Pack TP\",\n            name1: \"Pack_TP\",\n            placeholder1: \"Enter pack TP\",\n            defaultValue1: (initialData === null || initialData === void 0 ? void 0 : initialData.Pack_TP) || '',\n            label2: \"Pack MRP\",\n            name2: \"Pack_MRP\",\n            placeholder2: \"Enter pack MRP\",\n            defaultValue2: (initialData === null || initialData === void 0 ? void 0 : initialData.Pack_MRP) || ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: modalId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SaveButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditNonPharmacyButton, \"wWKaWQjULvKHxvgP0RXbHu4UCDI=\");\n\n_c = EditNonPharmacyButton;\n\nconst NonPharmacyProducts = () => {\n  _s2();\n\n  const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalPages, setTotalPages] = useState(0); // Function to handle opening the modal\n\n  const handleOpenModal = () => {\n    // Check if dropdown data is loaded\n    if (categories.length === 0 || companies.length === 0) {\n      // If data isn't loaded yet, fetch it first\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  }; // Function to handle refresh\n\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  }; // Fetch Non-Pharmacy Products\n\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n    let forceRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    try {\n      // Add a cache-busting parameter if forceRefresh is true\n      const cacheBuster = forceRefresh ? `&_=${Date.now()}` : '';\n      const fetchUrl = `${API_BASE_URL}?page=${page}&limit=${limit}${cacheBuster}`;\n      console.log(\"Fetch URL:\", fetchUrl);\n      const response = await fetch(fetchUrl);\n      console.log(\"Fetch response status:\", response.status);\n      const data = await response.json();\n\n      if (response.ok) {\n        console.log(\"Fetched non-pharmacy products:\", data.data); // Check if the first product is in the response\n\n        if (data.data && data.data.length > 0) {\n          console.log(\"First product in response:\", data.data[0]);\n        }\n\n        setNonPharmacyProducts(data.data);\n        setTotalProducts(data.totalItems || 0);\n        setTotalPages(data.totalPages || 1);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n        setNonPharmacyProducts([]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n      setNonPharmacyProducts([]);\n    }\n  }; // Function to refresh the product list\n\n\n  const refreshProductList = () => {\n    console.log(\"Refreshing product list\");\n    fetchProducts(currentPage, productsPerPage, true);\n  }; // Fetch products when the page changes\n\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]); // Separate function to fetch dropdown data\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  }; // Fetch dropdown data when component mounts\n\n\n  useEffect(() => {\n    fetchDropdownData();\n  }, []); // Add New Product\n\n  const addNonPharmacyProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries()); // Check for required fields\n\n    const requiredFields = ['Product_name', 'Category', 'Company', 'Stock'];\n    const missingFields = requiredFields.filter(field => !productDetails[field]);\n\n    if (missingFields.length > 0) {\n      toast.error(`Missing required fields: ${missingFields.join(', ')}`);\n      return;\n    }\n\n    productDetails.addedBy = 'admin';\n    productDetails.addedToDbAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        // Close the modal\n        document.getElementById('create-new-product').checked = false; // Show success message\n\n        toast.success(`Product ${productDetails.Product_name} added successfully`); // Refresh the product list\n\n        refreshProductList();\n      } else {\n        console.error('Error adding product:', data);\n        toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    } // Reset the form\n\n\n    event.target.reset();\n  }; // Render pagination\n\n\n  const renderPagination = () => {\n    const pages = [];\n\n    for (let i = 1; i <= totalPages; i++) {\n      pages.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ${currentPage === i ? 'btn-primary' : 'btn-ghost'}`,\n        onClick: () => setCurrentPage(i),\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }, this));\n    }\n\n    return pages;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"p-4 mt-16\",\n    children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n      name: `Non Pharmacy Products (${totalProducts})`,\n      value: totalProducts,\n      buttons: [/*#__PURE__*/_jsxDEV(NewButton, {\n        onClick: handleOpenModal\n      }, \"new-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n        onClick: refreshProductList\n      }, \"refresh-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PrintButton, {}, \"print-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 21\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Pack TP', 'Pack MRP', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: nonPharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.Product_name || 'N/A', product.Category || 'N/A', product.Company || 'N/A', product.Stock || 'N/A', product.Pack_Type || 'N/A', product.Pack_TP || 'N/A', product.Pack_MRP || 'N/A', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex items-center gap-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(EditNonPharmacyButton, {\n              id: product._id,\n              onUpdate: refreshProductList,\n              initialData: product\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n              deleteApiLink: `${API_BASE_URL}/${product._id}`,\n              itemId: product._id,\n              name: product.Product_name,\n              onDelete: refreshProductList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 33\n          }, this)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mt-4 gap-2\",\n      children: renderPagination()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box relative\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: \"create-new-product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          text: \"Add New Non-Pharmacy Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addNonPharmacyProduct,\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: \"Product Name\",\n            name: \"Product_name\",\n            placeholder: \"Enter product name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"Category\",\n            options: categories.map(cat => cat.name || cat),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Company\",\n            name: \"Company\",\n            options: companies.map(comp => comp.name || comp),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Stock\",\n            name: \"Stock\",\n            placeholder: \"Enter stock quantity\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Pack Type\",\n            name: \"Pack_Type\",\n            placeholder: \"Enter pack type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n            label1: \"Pack TP\",\n            name1: \"Pack_TP\",\n            placeholder1: \"Enter pack TP\",\n            label2: \"Pack MRP\",\n            name2: \"Pack_MRP\",\n            placeholder2: \"Enter pack MRP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: \"create-new-product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SaveButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(NonPharmacyProducts, \"IzbEChrBjE9eyJteCGfEa5xoci8=\");\n\n_c2 = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditNonPharmacyButton\");\n$RefreshReg$(_c2, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","EditNonPharmacyButton","id","onUpdate","initialData","categories","setCategories","companies","setCompanies","modalId","fetchDropdownData","categoriesRes","companiesRes","Promise","all","fetch","ok","categoriesData","json","Array","isArray","data","companiesData","error","console","handleUpdate","event","preventDefault","formData","FormData","target","productDetails","Object","fromEntries","entries","log","apiData","$set","Product_name","Category","Company","Stock","Pack_Type","Pack_TP","parseFloat","Pack_MRP","updatedAt","Date","toISOString","method","headers","localStorage","getItem","body","JSON","stringify","then","response","status","text","Error","success","document","getElementById","checked","setTimeout","catch","message","map","cat","name","comp","NonPharmacyProducts","nonPharmacyProducts","setNonPharmacyProducts","currentPage","setCurrentPage","productsPerPage","totalProducts","setTotalProducts","totalPages","setTotalPages","handleOpenModal","length","info","handleRefresh","fetchProducts","page","limit","forceRefresh","cacheBuster","now","fetchUrl","totalItems","refreshProductList","addNonPharmacyProduct","requiredFields","missingFields","filter","field","join","addedBy","addedToDbAt","reset","renderPagination","pages","i","push","item","index","product","_id"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/NonPharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\r\n\r\n// Custom EditButton component for NonPharmacy products\r\nconst EditNonPharmacyButton = ({ id, onUpdate, initialData }) => {\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const modalId = `edit-product-${id}`;\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        const fetchDropdownData = async () => {\r\n            try {\r\n                const [categoriesRes, companiesRes] = await Promise.all([\r\n                    fetch(`http://localhost:5000/api/setup/categories`),\r\n                    fetch(`http://localhost:5000/api/setup/companies`),\r\n                ]);\r\n                \r\n                if (categoriesRes.ok) {\r\n                    const categoriesData = await categoriesRes.json();\r\n                    if (Array.isArray(categoriesData)) {\r\n                        setCategories(categoriesData);\r\n                    } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                        setCategories(categoriesData.data);\r\n                    }\r\n                }\r\n                \r\n                if (companiesRes.ok) {\r\n                    const companiesData = await companiesRes.json();\r\n                    if (Array.isArray(companiesData)) {\r\n                        setCompanies(companiesData);\r\n                    } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                        setCompanies(companiesData.data);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching dropdown data:', error);\r\n            }\r\n        };\r\n        \r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    const handleUpdate = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        \r\n        console.log(\"Updating product with ID:\", id);\r\n        console.log(\"Update data:\", productDetails);\r\n\r\n        // Create a simple update object with just the fields we want to update\r\n        const apiData = {\r\n            $set: {  // Use MongoDB $set operator to update only specified fields\r\n                Product_name: productDetails.Product_name,\r\n                Category: productDetails.Category,\r\n                Company: productDetails.Company,\r\n                Stock: productDetails.Stock,\r\n                Pack_Type: productDetails.Pack_Type,\r\n                Pack_TP: parseFloat(productDetails.Pack_TP),\r\n                Pack_MRP: parseFloat(productDetails.Pack_MRP),\r\n                updatedAt: new Date().toISOString()  // Add timestamp to force update\r\n            }\r\n        };\r\n\r\n        console.log(\"MongoDB update object:\", apiData);\r\n\r\n        // Use the standard PUT endpoint as defined in the backend\r\n        fetch(`${API_BASE_URL}/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify(apiData),\r\n        })\r\n        .then(response => {\r\n            console.log(\"PUT response status:\", response.status);\r\n            if (!response.ok) {\r\n                return response.text().then(text => {\r\n                    console.error(\"PUT error response:\", text);\r\n                    throw new Error('Update failed: ' + text);\r\n                });\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            console.log(\"PUT successful, API response:\", data);\r\n            toast.success(`Product updated successfully`);\r\n            document.getElementById(modalId).checked = false;\r\n            \r\n            // Force a refresh of the product list with a longer delay\r\n            if (onUpdate) {\r\n                console.log(\"Triggering product list refresh with delay\");\r\n                setTimeout(() => onUpdate(), 1000);  // Longer delay to ensure database update\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error in PUT:', error);\r\n            toast.error('Failed to update product: ' + error.message);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <EditButton modalId={modalId} />\r\n            \r\n            {/* Edit Product Modal */}\r\n            <input type=\"checkbox\" id={modalId} className=\"modal-toggle\" />\r\n            <div className=\"modal\">\r\n                <div className=\"modal-box relative\">\r\n                    <ModalCloseButton modalId={modalId} />\r\n                    <ModalHeading text={`Edit Product: ${initialData?.Product_name || ''}`} />\r\n                    \r\n                    <form onSubmit={handleUpdate} className=\"space-y-4\">\r\n                        <Input \r\n                            label=\"Product Name\" \r\n                            name=\"Product_name\" \r\n                            placeholder=\"Enter product name\" \r\n                            defaultValue={initialData?.Product_name || ''} \r\n                            required \r\n                        />\r\n                        \r\n                        <Select \r\n                            label=\"Category\" \r\n                            name=\"Category\" \r\n                            options={categories.map(cat => cat.name || cat)} \r\n                            defaultValue={initialData?.Category || ''} \r\n                            required \r\n                        />\r\n                        \r\n                        <Select \r\n                            label=\"Company\" \r\n                            name=\"Company\" \r\n                            options={companies.map(comp => comp.name || comp)} \r\n                            defaultValue={initialData?.Company || ''} \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Stock\" \r\n                            name=\"Stock\" \r\n                            placeholder=\"Enter stock quantity\" \r\n                            defaultValue={initialData?.Stock || ''} \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Pack Type\" \r\n                            name=\"Pack_Type\" \r\n                            placeholder=\"Enter pack type\" \r\n                            defaultValue={initialData?.Pack_Type || ''} \r\n                        />\r\n                        \r\n                        <DoubleInput \r\n                            label1=\"Pack TP\" \r\n                            name1=\"Pack_TP\" \r\n                            placeholder1=\"Enter pack TP\" \r\n                            defaultValue1={initialData?.Pack_TP || ''} \r\n                            label2=\"Pack MRP\" \r\n                            name2=\"Pack_MRP\" \r\n                            placeholder2=\"Enter pack MRP\" \r\n                            defaultValue2={initialData?.Pack_MRP || ''} \r\n                        />\r\n                        \r\n                        <div className=\"flex justify-end gap-2\">\r\n                            <CancelButton modalId={modalId} />\r\n                            <SaveButton />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage] = useState(10);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n\r\n        // Function to handle opening the modal\r\n        const handleOpenModal = () => {\r\n            // Check if dropdown data is loaded\r\n            if (categories.length === 0 || companies.length === 0 ) {\r\n                // If data isn't loaded yet, fetch it first\r\n                fetchDropdownData();\r\n                toast.info(\"Loading form data...\");\r\n            }\r\n            document.getElementById('create-new-product').checked = true;\r\n        };\r\n\r\n        \r\n    // Function to handle refresh\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    // Fetch Non-Pharmacy Products\r\n    const fetchProducts = async (page = 1, limit = productsPerPage, forceRefresh = false) => {\r\n        try {\r\n            // Add a cache-busting parameter if forceRefresh is true\r\n            const cacheBuster = forceRefresh ? `&_=${Date.now()}` : '';\r\n            const fetchUrl = `${API_BASE_URL}?page=${page}&limit=${limit}${cacheBuster}`;\r\n            \r\n            console.log(\"Fetch URL:\", fetchUrl);\r\n            \r\n            const response = await fetch(fetchUrl);\r\n            console.log(\"Fetch response status:\", response.status);\r\n            \r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                console.log(\"Fetched non-pharmacy products:\", data.data);\r\n                \r\n                // Check if the first product is in the response\r\n                if (data.data && data.data.length > 0) {\r\n                    console.log(\"First product in response:\", data.data[0]);\r\n                }\r\n                \r\n                setNonPharmacyProducts(data.data);\r\n                setTotalProducts(data.totalItems || 0);\r\n                setTotalPages(data.totalPages || 1);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n                setNonPharmacyProducts([]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n            setNonPharmacyProducts([]);\r\n        }\r\n    };\r\n\r\n    // Function to refresh the product list\r\n    const refreshProductList = () => {\r\n        console.log(\"Refreshing product list\");\r\n        fetchProducts(currentPage, productsPerPage, true);\r\n    };\r\n\r\n    // Fetch products when the page changes\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n        // Separate function to fetch dropdown data\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`),\r\n            ]);\r\n            \r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n            \r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    // Add New Product\r\n    const addNonPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        // Check for required fields\r\n        const requiredFields = ['Product_name', 'Category', 'Company', 'Stock'];\r\n        const missingFields = requiredFields.filter(field => !productDetails[field]);\r\n        \r\n        if (missingFields.length > 0) {\r\n            toast.error(`Missing required fields: ${missingFields.join(', ')}`);\r\n            return;\r\n        }\r\n        productDetails.addedBy = 'admin';\r\n        productDetails.addedToDbAt = new Date().toISOString();\r\n\r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                // Close the modal\r\n                document.getElementById('create-new-product').checked = false;\r\n                \r\n                // Show success message\r\n                toast.success(`Product ${productDetails.Product_name} added successfully`);\r\n                \r\n                // Refresh the product list\r\n                refreshProductList();\r\n            } else {\r\n                console.error('Error adding product:', data);\r\n                toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n        \r\n        // Reset the form\r\n        event.target.reset();\r\n    };\r\n\r\n    // Render pagination\r\n    const renderPagination = () => {\r\n        const pages = [];\r\n        for (let i = 1; i <= totalPages; i++) {\r\n            pages.push(\r\n                <button\r\n                    key={i}\r\n                    className={`btn ${currentPage === i ? 'btn-primary' : 'btn-ghost'}`}\r\n                    onClick={() => setCurrentPage(i)}\r\n                >\r\n                    {i}\r\n                </button>\r\n            );\r\n        }\r\n        return pages;\r\n    };\r\n\r\n    return (\r\n        <section className='p-4 mt-16'>\r\n            <DashboardPageHeading\r\n                name={`Non Pharmacy Products (${totalProducts})`}\r\n                value={totalProducts}\r\n                buttons={[\r\n                    <NewButton key=\"new-button\" onClick={handleOpenModal} />,\r\n                    <RefreshButton key=\"refresh-button\" onClick={refreshProductList} />,\r\n                    <PrintButton key=\"print-button\" />\r\n                ]}\r\n            />\r\n\r\n            {/* Products Table */}\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Pack TP', 'Pack MRP', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {nonPharmacyProducts.map((product, index) => (\r\n                        <TableRow\r\n                            key={product._id}\r\n                            tableRowsData={[\r\n                                (currentPage - 1) * productsPerPage + index + 1,\r\n                                product.Product_name || 'N/A',\r\n                                product.Category || 'N/A',\r\n                                product.Company || 'N/A',\r\n                                product.Stock || 'N/A',\r\n                                product.Pack_Type || 'N/A',\r\n                                product.Pack_TP || 'N/A',\r\n                                product.Pack_MRP || 'N/A',\r\n                                <span className='flex items-center gap-x-1'>\r\n                                    <EditNonPharmacyButton \r\n                                        id={product._id} \r\n                                        onUpdate={refreshProductList}\r\n                                        initialData={product}\r\n                                    />\r\n                                    <DeleteButton \r\n                                        deleteApiLink={`${API_BASE_URL}/${product._id}`} \r\n                                        itemId={product._id} \r\n                                        name={product.Product_name} \r\n                                        onDelete={refreshProductList}\r\n                                    />\r\n                                </span>\r\n                            ]}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            <div className=\"flex justify-center mt-4 gap-2\">\r\n                {renderPagination()}\r\n            </div>\r\n\r\n            {/* Add New Product Modal */}\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <div className=\"modal\">\r\n                <div className=\"modal-box relative\">\r\n                    <ModalCloseButton modalId=\"create-new-product\" />\r\n                    <ModalHeading text=\"Add New Non-Pharmacy Product\" />\r\n                    \r\n                    <form onSubmit={addNonPharmacyProduct} className=\"space-y-4\">\r\n                        <Input \r\n                            label=\"Product Name\" \r\n                            name=\"Product_name\" \r\n                            placeholder=\"Enter product name\" \r\n                            required \r\n                        />\r\n                        \r\n                        <Select \r\n                            label=\"Category\" \r\n                            name=\"Category\" \r\n                            options={categories.map(cat => cat.name || cat)} \r\n                            required \r\n                        />\r\n                        \r\n                        <Select \r\n                            label=\"Company\" \r\n                            name=\"Company\" \r\n                            options={companies.map(comp => comp.name || comp)} \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Stock\" \r\n                            name=\"Stock\" \r\n                            placeholder=\"Enter stock quantity\" \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Pack Type\" \r\n                            name=\"Pack_Type\" \r\n                            placeholder=\"Enter pack type\" \r\n                        />\r\n                        \r\n                        <DoubleInput \r\n                            label1=\"Pack TP\" \r\n                            name1=\"Pack_TP\" \r\n                            placeholder1=\"Enter pack TP\" \r\n                            label2=\"Pack MRP\" \r\n                            name2=\"Pack_MRP\" \r\n                            placeholder2=\"Enter pack MRP\" \r\n                        />\r\n                        \r\n                        <div className=\"flex justify-end gap-2\">\r\n                            <CancelButton modalId=\"create-new-product\" />\r\n                            <SaveButton />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}