{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\NonPharmacyProducts.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy'; // Custom EditButton component for NonPharmacy products\n\nconst EditNonPharmacyButton = _ref => {\n  _s();\n\n  let {\n    id,\n    onUpdate,\n    initialData\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    Product_name: '',\n    Category: '',\n    Company: '',\n    Description: '',\n    Price: '',\n    Discount: '',\n    Stock: '',\n    Status: 'Active'\n  });\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  useEffect(() => {\n    if (id) {\n      console.log(\"Product ID:\", id);\n\n      if (initialData) {\n        setFormData({\n          Product_name: initialData.Product_name || '',\n          Category: initialData.Category || '',\n          Company: initialData.Company || '',\n          Description: initialData.Description || '',\n          Price: initialData.Price || '',\n          Discount: initialData.Discount || '',\n          Stock: initialData.Stock || '',\n          Status: initialData.Status || 'Active'\n        });\n      } // Fetch categories\n\n\n      fetch('http://localhost:5000/api/setup/categories').then(response => response.json()).then(data => setCategories(data)).catch(error => console.error('Error fetching categories:', error)); // Fetch companies\n\n      fetch('http://localhost:5000/api/setup/companies').then(response => response.json()).then(data => setCompanies(data)).catch(error => console.error('Error fetching companies:', error));\n    } else {\n      console.log(\"No product ID provided\");\n    }\n  }, [id, initialData]);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({ ...prev,\n      [name]: value\n    }));\n  };\n\n  const renderCategoryOptions = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category.Name,\n        children: category.Name\n      }, category._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true);\n  };\n\n  const renderCompanyOptions = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Company\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), companies.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.Name,\n        children: company.Name\n      }, company._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch(`http://localhost:5000/api/products/nonPharmacy/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          $set: formData\n        })\n      });\n\n      if (response.ok) {\n        const updatedProduct = await response.json();\n        onUpdate(updatedProduct);\n        setIsOpen(false);\n      } else {\n        console.error('Failed to update product');\n      }\n    } catch (error) {\n      console.error('Error updating product:', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(true),\n      className: \"bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600 mr-1\",\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg w-full max-w-2xl\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(ModalHeading, {\n            children: \"Edit Non-Pharmacy Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {\n            onClick: () => setIsOpen(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              label: \"Product Name\",\n              name: \"Product_name\",\n              value: formData.Product_name,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"category\",\n                className: \"form-label\",\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-select\",\n                id: \"category\",\n                name: \"Category\",\n                value: formData.Category || \"\",\n                onChange: handleChange,\n                children: renderCategoryOptions()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"company\",\n                className: \"form-label\",\n                children: \"Company\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-select\",\n                id: \"company\",\n                name: \"Company\",\n                value: formData.Company || \"\",\n                onChange: handleChange,\n                children: renderCompanyOptions()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              label: \"Description\",\n              name: \"Description\",\n              value: formData.Description,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n              label1: \"Price\",\n              name1: \"Price\",\n              value1: formData.Price,\n              onChange1: handleChange,\n              label2: \"Discount\",\n              name2: \"Discount\",\n              value2: formData.Discount,\n              onChange2: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              label: \"Stock\",\n              name: \"Stock\",\n              value: formData.Stock,\n              onChange: handleChange,\n              type: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              label: \"Status\",\n              name: \"Status\",\n              value: formData.Status,\n              onChange: handleChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Active\",\n                children: \"Active\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Inactive\",\n                children: \"Inactive\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n              onClick: () => setIsOpen(false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n              type: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditNonPharmacyButton, \"+bJXpAycwK1FcApK5gxg7c6tjiI=\");\n\n_c = EditNonPharmacyButton;\n\nconst NonPharmacyProducts = () => {\n  _s2();\n\n  const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage, setProductsPerPage] = useState(10);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [formData, setFormData] = useState({\n    Product_name: '',\n    Category: '',\n    Company: '',\n    Description: '',\n    Price: '',\n    Discount: '',\n    Stock: '',\n    Status: 'Active'\n  }); // Function to handle opening the modal\n\n  const handleOpenModal = () => {\n    // Check if dropdown data is loaded\n    if (categories.length === 0 || companies.length === 0) {\n      // If data isn't loaded yet, fetch it first\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  }; // Function to handle refresh\n\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  }; // Fetch Non-Pharmacy Products\n\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n    let forceRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    try {\n      // Add a cache-busting parameter if forceRefresh is true\n      const cacheBuster = forceRefresh ? `&_=${Date.now()}` : '';\n      const fetchUrl = `${API_BASE_URL}?page=${page}&limit=${limit}${cacheBuster}`;\n      console.log(\"Fetch URL:\", fetchUrl);\n      const response = await fetch(fetchUrl);\n      console.log(\"Fetch response status:\", response.status);\n      const data = await response.json();\n\n      if (response.ok) {\n        console.log(\"Fetched non-pharmacy products:\", data.data); // Check if the first product is in the response\n\n        if (data.data && data.data.length > 0) {\n          console.log(\"First product in response:\", data.data[0]);\n        }\n\n        setNonPharmacyProducts(data.data);\n        setTotalPages(data.totalPages || 1);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n        setNonPharmacyProducts([]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n      setNonPharmacyProducts([]);\n    }\n  }; // Function to refresh the product list\n\n\n  const refreshProductList = () => {\n    console.log(\"Refreshing product list\");\n    fetchProducts(currentPage, productsPerPage, true);\n  }; // Fetch products when the page changes\n\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]); // Separate function to fetch dropdown data\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  }; // Fetch dropdown data when component mounts\n\n\n  useEffect(() => {\n    fetchDropdownData();\n  }, []); // Add New Product\n\n  const addNonPharmacyProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries()); // Check for required fields\n\n    const requiredFields = ['Product_name', 'Category', 'Company', 'Stock'];\n    const missingFields = requiredFields.filter(field => !productDetails[field]);\n\n    if (missingFields.length > 0) {\n      toast.error(`Missing required fields: ${missingFields.join(', ')}`);\n      return;\n    }\n\n    productDetails.addedBy = 'admin';\n    productDetails.addedToDbAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        // Close the modal\n        document.getElementById('create-new-product').checked = false; // Show success message\n\n        toast.success(`Product ${productDetails.Product_name} added successfully`); // Refresh the product list\n\n        refreshProductList();\n      } else {\n        console.error('Error adding product:', data);\n        toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    } // Reset the form\n\n\n    event.target.reset();\n  }; // Render pagination\n\n\n  const renderPagination = () => {\n    const pages = [];\n\n    for (let i = 1; i <= totalPages; i++) {\n      pages.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ${currentPage === i ? 'btn-primary' : 'btn-ghost'}`,\n        onClick: () => setCurrentPage(i),\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this));\n    }\n\n    return pages;\n  }; // Function to handle product update\n\n\n  const handleProductUpdate = (productId, updatedData) => {\n    console.log(\"Updating product:\", productId, updatedData); // Make API call to update the product\n\n    fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    }).then(response => {\n      if (response.ok) {\n        toast.success('Product updated successfully');\n        refreshProductList(); // Refresh the product list after update\n      } else {\n        toast.error('Failed to update product');\n      }\n    }).catch(error => {\n      console.error('Error updating product:', error);\n      toast.error('Error updating product');\n    });\n  }; // Function to handle product deletion\n\n\n  const handleDelete = productId => {\n    if (window.confirm('Are you sure you want to delete this product?')) {\n      fetch(`${API_BASE_URL}/${productId}`, {\n        method: 'DELETE'\n      }).then(response => {\n        if (response.ok) {\n          toast.success('Product deleted successfully');\n          refreshProductList(); // Refresh the product list after deletion\n        } else {\n          toast.error('Failed to delete product');\n        }\n      }).catch(error => {\n        console.error('Error deleting product:', error);\n        toast.error('Error deleting product');\n      });\n    }\n  }; // In the renderActions function, make sure to return JSX elements, not objects\n\n\n  const renderActions = product => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-1\",\n      children: [/*#__PURE__*/_jsxDEV(EditNonPharmacyButton, {\n        id: product._id,\n        onUpdate: handleProductUpdate,\n        initialData: product\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDelete(product._id),\n        className: \"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this);\n  }; // Function to handle input changes\n\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({ ...prev,\n      [name]: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"p-4 mt-16\",\n    children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n      name: `Non Pharmacy Products (${nonPharmacyProducts.length})`,\n      value: nonPharmacyProducts.length,\n      buttons: [/*#__PURE__*/_jsxDEV(NewButton, {\n        onClick: handleOpenModal\n      }, \"new-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n        onClick: refreshProductList\n      }, \"refresh-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PrintButton, {}, \"print-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 21\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Pack TP', 'Pack MRP', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: nonPharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.Product_name || 'N/A', product.Category || 'N/A', product.Company || 'N/A', product.Stock || 'N/A', product.Pack_Type || 'N/A', product.Pack_TP || 'N/A', product.Pack_MRP || 'N/A', renderActions(product)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mt-4 gap-2\",\n      children: renderPagination()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box relative\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: \"create-new-product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          text: \"Add New Non-Pharmacy Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addNonPharmacyProduct,\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: \"Product Name\",\n            name: \"Product_name\",\n            placeholder: \"Enter product name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"category\",\n              className: \"form-label\",\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              id: \"category\",\n              name: \"Category\",\n              value: formData.Category || \"\",\n              onChange: handleInputChange,\n              children: renderCategoryOptions()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"company\",\n              className: \"form-label\",\n              children: \"Company\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              id: \"company\",\n              name: \"Company\",\n              value: formData.Company || \"\",\n              onChange: handleInputChange,\n              children: renderCompanyOptions()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Stock\",\n            name: \"Stock\",\n            placeholder: \"Enter stock quantity\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Pack Type\",\n            name: \"Pack_Type\",\n            placeholder: \"Enter pack type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n            label1: \"Pack TP\",\n            name1: \"Pack_TP\",\n            placeholder1: \"Enter pack TP\",\n            label2: \"Pack MRP\",\n            name2: \"Pack_MRP\",\n            placeholder2: \"Enter pack MRP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: \"create-new-product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SaveButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 490,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(NonPharmacyProducts, \"zifAyTxg6ladCN6iBA48IWNYPvM=\");\n\n_c2 = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditNonPharmacyButton\");\n$RefreshReg$(_c2, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","EditNonPharmacyButton","id","onUpdate","initialData","isOpen","setIsOpen","formData","setFormData","Product_name","Category","Company","Description","Price","Discount","Stock","Status","categories","setCategories","companies","setCompanies","console","log","fetch","then","response","json","data","catch","error","handleChange","e","name","value","target","prev","renderCategoryOptions","map","category","Name","_id","renderCompanyOptions","company","handleSubmit","preventDefault","method","headers","body","JSON","stringify","$set","ok","updatedProduct","NonPharmacyProducts","nonPharmacyProducts","setNonPharmacyProducts","totalPages","setTotalPages","currentPage","setCurrentPage","productsPerPage","setProductsPerPage","handleOpenModal","length","fetchDropdownData","info","document","getElementById","checked","handleRefresh","fetchProducts","page","limit","forceRefresh","cacheBuster","Date","now","fetchUrl","status","refreshProductList","categoriesRes","companiesRes","Promise","all","categoriesData","Array","isArray","companiesData","addNonPharmacyProduct","event","FormData","productDetails","Object","fromEntries","entries","requiredFields","missingFields","filter","field","join","addedBy","addedToDbAt","toISOString","success","reset","renderPagination","pages","i","push","handleProductUpdate","productId","updatedData","handleDelete","window","confirm","renderActions","product","handleInputChange","item","index","Pack_Type","Pack_TP","Pack_MRP"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/NonPharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\r\n\r\n// Custom EditButton component for NonPharmacy products\r\nconst EditNonPharmacyButton = ({ id, onUpdate, initialData }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        Product_name: '',\r\n        Category: '',\r\n        Company: '',\r\n        Description: '',\r\n        Price: '',\r\n        Discount: '',\r\n        Stock: '',\r\n        Status: 'Active'\r\n    });\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            console.log(\"Product ID:\", id);\r\n            if (initialData) {\r\n                setFormData({\r\n                    Product_name: initialData.Product_name || '',\r\n                    Category: initialData.Category || '',\r\n                    Company: initialData.Company || '',\r\n                    Description: initialData.Description || '',\r\n                    Price: initialData.Price || '',\r\n                    Discount: initialData.Discount || '',\r\n                    Stock: initialData.Stock || '',\r\n                    Status: initialData.Status || 'Active'\r\n                });\r\n            }\r\n            \r\n            // Fetch categories\r\n            fetch('http://localhost:5000/api/setup/categories')\r\n                .then(response => response.json())\r\n                .then(data => setCategories(data))\r\n                .catch(error => console.error('Error fetching categories:', error));\r\n            \r\n            // Fetch companies\r\n            fetch('http://localhost:5000/api/setup/companies')\r\n                .then(response => response.json())\r\n                .then(data => setCompanies(data))\r\n                .catch(error => console.error('Error fetching companies:', error));\r\n        } else {\r\n            console.log(\"No product ID provided\");\r\n        }\r\n    }, [id, initialData]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const renderCategoryOptions = () => {\r\n        return (\r\n            <>\r\n                <option value=\"\">Select Category</option>\r\n                {categories.map((category) => (\r\n                    <option key={category._id} value={category.Name}>\r\n                        {category.Name}\r\n                    </option>\r\n                ))}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const renderCompanyOptions = () => {\r\n        return (\r\n            <>\r\n                <option value=\"\">Select Company</option>\r\n                {companies.map((company) => (\r\n                    <option key={company._id} value={company.Name}>\r\n                        {company.Name}\r\n                    </option>\r\n                ))}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/products/nonPharmacy/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    $set: formData\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedProduct = await response.json();\r\n                onUpdate(updatedProduct);\r\n                setIsOpen(false);\r\n            } else {\r\n                console.error('Failed to update product');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating product:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                onClick={() => setIsOpen(true)}\r\n                className=\"bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600 mr-1\"\r\n            >\r\n                Edit\r\n            </button>\r\n\r\n            {isOpen && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n                    <div className=\"bg-white p-6 rounded-lg w-full max-w-2xl\">\r\n                        <div className=\"flex justify-between items-center mb-4\">\r\n                            <ModalHeading>Edit Non-Pharmacy Product</ModalHeading>\r\n                            <ModalCloseButton onClick={() => setIsOpen(false)} />\r\n                        </div>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n                                <Input\r\n                                    label=\"Product Name\"\r\n                                    name=\"Product_name\"\r\n                                    value={formData.Product_name}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"category\" className=\"form-label\">\r\n                                        Category\r\n                                    </label>\r\n                                    <select\r\n                                        className=\"form-select\"\r\n                                        id=\"category\"\r\n                                        name=\"Category\"\r\n                                        value={formData.Category || \"\"}\r\n                                        onChange={handleChange}\r\n                                    >\r\n                                        {renderCategoryOptions()}\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"company\" className=\"form-label\">\r\n                                        Company\r\n                                    </label>\r\n                                    <select\r\n                                        className=\"form-select\"\r\n                                        id=\"company\"\r\n                                        name=\"Company\"\r\n                                        value={formData.Company || \"\"}\r\n                                        onChange={handleChange}\r\n                                    >\r\n                                        {renderCompanyOptions()}\r\n                                    </select>\r\n                                </div>\r\n                                <Input\r\n                                    label=\"Description\"\r\n                                    name=\"Description\"\r\n                                    value={formData.Description}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <DoubleInput\r\n                                    label1=\"Price\"\r\n                                    name1=\"Price\"\r\n                                    value1={formData.Price}\r\n                                    onChange1={handleChange}\r\n                                    label2=\"Discount\"\r\n                                    name2=\"Discount\"\r\n                                    value2={formData.Discount}\r\n                                    onChange2={handleChange}\r\n                                />\r\n                                <Input\r\n                                    label=\"Stock\"\r\n                                    name=\"Stock\"\r\n                                    value={formData.Stock}\r\n                                    onChange={handleChange}\r\n                                    type=\"number\"\r\n                                />\r\n                                <Select\r\n                                    label=\"Status\"\r\n                                    name=\"Status\"\r\n                                    value={formData.Status}\r\n                                    onChange={handleChange}\r\n                                >\r\n                                    <option value=\"Active\">Active</option>\r\n                                    <option value=\"Inactive\">Inactive</option>\r\n                                </Select>\r\n                            </div>\r\n                            <div className=\"flex justify-end space-x-2\">\r\n                                <CancelButton onClick={() => setIsOpen(false)} />\r\n                                <SaveButton type=\"submit\" />\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage, setProductsPerPage] = useState(10);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        Product_name: '',\r\n        Category: '',\r\n        Company: '',\r\n        Description: '',\r\n        Price: '',\r\n        Discount: '',\r\n        Stock: '',\r\n        Status: 'Active'\r\n    });\r\n\r\n    // Function to handle opening the modal\r\n    const handleOpenModal = () => {\r\n        // Check if dropdown data is loaded\r\n        if (categories.length === 0 || companies.length === 0 ) {\r\n            // If data isn't loaded yet, fetch it first\r\n            fetchDropdownData();\r\n            toast.info(\"Loading form data...\");\r\n        }\r\n        document.getElementById('create-new-product').checked = true;\r\n    };\r\n\r\n    // Function to handle refresh\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    // Fetch Non-Pharmacy Products\r\n    const fetchProducts = async (page = 1, limit = productsPerPage, forceRefresh = false) => {\r\n        try {\r\n            // Add a cache-busting parameter if forceRefresh is true\r\n            const cacheBuster = forceRefresh ? `&_=${Date.now()}` : '';\r\n            const fetchUrl = `${API_BASE_URL}?page=${page}&limit=${limit}${cacheBuster}`;\r\n            \r\n            console.log(\"Fetch URL:\", fetchUrl);\r\n            \r\n            const response = await fetch(fetchUrl);\r\n            console.log(\"Fetch response status:\", response.status);\r\n            \r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                console.log(\"Fetched non-pharmacy products:\", data.data);\r\n                \r\n                // Check if the first product is in the response\r\n                if (data.data && data.data.length > 0) {\r\n                    console.log(\"First product in response:\", data.data[0]);\r\n                }\r\n                \r\n                setNonPharmacyProducts(data.data);\r\n                setTotalPages(data.totalPages || 1);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n                setNonPharmacyProducts([]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n            setNonPharmacyProducts([]);\r\n        }\r\n    };\r\n\r\n    // Function to refresh the product list\r\n    const refreshProductList = () => {\r\n        console.log(\"Refreshing product list\");\r\n        fetchProducts(currentPage, productsPerPage, true);\r\n    };\r\n\r\n    // Fetch products when the page changes\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n    // Separate function to fetch dropdown data\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`),\r\n            ]);\r\n            \r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n            \r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    // Add New Product\r\n    const addNonPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        // Check for required fields\r\n        const requiredFields = ['Product_name', 'Category', 'Company', 'Stock'];\r\n        const missingFields = requiredFields.filter(field => !productDetails[field]);\r\n        \r\n        if (missingFields.length > 0) {\r\n            toast.error(`Missing required fields: ${missingFields.join(', ')}`);\r\n            return;\r\n        }\r\n        productDetails.addedBy = 'admin';\r\n        productDetails.addedToDbAt = new Date().toISOString();\r\n\r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                // Close the modal\r\n                document.getElementById('create-new-product').checked = false;\r\n                \r\n                // Show success message\r\n                toast.success(`Product ${productDetails.Product_name} added successfully`);\r\n                \r\n                // Refresh the product list\r\n                refreshProductList();\r\n            } else {\r\n                console.error('Error adding product:', data);\r\n                toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n        \r\n        // Reset the form\r\n        event.target.reset();\r\n    };\r\n\r\n    // Render pagination\r\n    const renderPagination = () => {\r\n        const pages = [];\r\n        for (let i = 1; i <= totalPages; i++) {\r\n            pages.push(\r\n                <button\r\n                    key={i}\r\n                    className={`btn ${currentPage === i ? 'btn-primary' : 'btn-ghost'}`}\r\n                    onClick={() => setCurrentPage(i)}\r\n                >\r\n                    {i}\r\n                </button>\r\n            );\r\n        }\r\n        return pages;\r\n    };\r\n\r\n    // Function to handle product update\r\n    const handleProductUpdate = (productId, updatedData) => {\r\n        console.log(\"Updating product:\", productId, updatedData);\r\n        // Make API call to update the product\r\n        fetch(`${API_BASE_URL}/${productId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updatedData),\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                toast.success('Product updated successfully');\r\n                refreshProductList(); // Refresh the product list after update\r\n            } else {\r\n                toast.error('Failed to update product');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error updating product:', error);\r\n            toast.error('Error updating product');\r\n        });\r\n    };\r\n    \r\n    // Function to handle product deletion\r\n    const handleDelete = (productId) => {\r\n        if (window.confirm('Are you sure you want to delete this product?')) {\r\n            fetch(`${API_BASE_URL}/${productId}`, {\r\n                method: 'DELETE',\r\n            })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    toast.success('Product deleted successfully');\r\n                    refreshProductList(); // Refresh the product list after deletion\r\n                } else {\r\n                    toast.error('Failed to delete product');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('Error deleting product:', error);\r\n                toast.error('Error deleting product');\r\n            });\r\n        }\r\n    };\r\n\r\n    // In the renderActions function, make sure to return JSX elements, not objects\r\n    const renderActions = (product) => {\r\n        return (\r\n            <div className=\"flex space-x-1\">\r\n                <EditNonPharmacyButton \r\n                    id={product._id} \r\n                    onUpdate={handleProductUpdate} \r\n                    initialData={product}\r\n                />\r\n                <button\r\n                    onClick={() => handleDelete(product._id)}\r\n                    className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\r\n                >\r\n                    Delete\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // Function to handle input changes\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <section className='p-4 mt-16'>\r\n            <DashboardPageHeading\r\n                name={`Non Pharmacy Products (${nonPharmacyProducts.length})`}\r\n                value={nonPharmacyProducts.length}\r\n                buttons={[\r\n                    <NewButton key=\"new-button\" onClick={handleOpenModal} />,\r\n                    <RefreshButton key=\"refresh-button\" onClick={refreshProductList} />,\r\n                    <PrintButton key=\"print-button\" />\r\n                ]}\r\n            />\r\n\r\n            {/* Products Table */}\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Pack TP', 'Pack MRP', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {nonPharmacyProducts.map((product, index) => (\r\n                        <TableRow\r\n                            key={product._id}\r\n                            tableRowsData={[\r\n                                (currentPage - 1) * productsPerPage + index + 1,\r\n                                product.Product_name || 'N/A',\r\n                                product.Category || 'N/A',\r\n                                product.Company || 'N/A',\r\n                                product.Stock || 'N/A',\r\n                                product.Pack_Type || 'N/A',\r\n                                product.Pack_TP || 'N/A',\r\n                                product.Pack_MRP || 'N/A',\r\n                                renderActions(product)\r\n                            ]}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            <div className=\"flex justify-center mt-4 gap-2\">\r\n                {renderPagination()}\r\n            </div>\r\n\r\n            {/* Add New Product Modal */}\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <div className=\"modal\">\r\n                <div className=\"modal-box relative\">\r\n                    <ModalCloseButton modalId=\"create-new-product\" />\r\n                    <ModalHeading text=\"Add New Non-Pharmacy Product\" />\r\n                    \r\n                    <form onSubmit={addNonPharmacyProduct} className=\"space-y-4\">\r\n                        <Input \r\n                            label=\"Product Name\" \r\n                            name=\"Product_name\" \r\n                            placeholder=\"Enter product name\" \r\n                            required \r\n                        />\r\n                        \r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"category\" className=\"form-label\">\r\n                                Category\r\n                            </label>\r\n                            <select\r\n                                className=\"form-select\"\r\n                                id=\"category\"\r\n                                name=\"Category\"\r\n                                value={formData.Category || \"\"}\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                {renderCategoryOptions()}\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"company\" className=\"form-label\">\r\n                                Company\r\n                            </label>\r\n                            <select\r\n                                className=\"form-select\"\r\n                                id=\"company\"\r\n                                name=\"Company\"\r\n                                value={formData.Company || \"\"}\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                {renderCompanyOptions()}\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <Input \r\n                            label=\"Stock\" \r\n                            name=\"Stock\" \r\n                            placeholder=\"Enter stock quantity\" \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Pack Type\" \r\n                            name=\"Pack_Type\" \r\n                            placeholder=\"Enter pack type\" \r\n                        />\r\n                        \r\n                        <DoubleInput \r\n                            label1=\"Pack TP\" \r\n                            name1=\"Pack_TP\" \r\n                            placeholder1=\"Enter pack TP\" \r\n                            label2=\"Pack MRP\" \r\n                            name2=\"Pack_MRP\" \r\n                            placeholder2=\"Enter pack MRP\" \r\n                        />\r\n                        \r\n                        <div className=\"flex justify-end gap-2\">\r\n                            <CancelButton modalId=\"create-new-product\" />\r\n                            <SaveButton />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}