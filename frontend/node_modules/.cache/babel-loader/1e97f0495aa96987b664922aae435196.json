{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aweso\\\\OneDrive\\\\Desktop\\\\QuickMeds\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\Products\\\\NonPharmacyProducts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SaveButton from '../../../components/buttons/SaveButton';\nimport CancelButton from '../../../components/buttons/CancelButton';\nimport PrintButton from '../../../components/buttons/PrintButton';\nimport NewButton from '../../../components/buttons/NewButton';\nimport Input from '../../../components/form/Input';\nimport Select from '../../../components/form/Select';\nimport DoubleInput from '../../../components/form/DoubleInput';\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\nimport ModalHeading from '../../../components/headings/ModalHeading';\nimport RefreshButton from '../../../components/buttons/RefreshButton';\nimport TableRow from '../../../components/TableRow';\nimport EditButton from '../../../components/buttons/EditButton';\nimport DeleteButton from '../../../components/buttons/DeleteButton';\nimport { toast } from 'react-toastify';\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\nimport AddModal from '../../../components/modals/AddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\n\nconst NonPharmacyProducts = () => {\n  _s();\n\n  const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalPages, setTotalPages] = useState(0); // Function to handle opening the modal\n\n  const handleOpenModal = () => {\n    // Check if dropdown data is loaded\n    if (categories.length === 0 || companies.length === 0) {\n      // If data isn't loaded yet, fetch it first\n      fetchDropdownData();\n      toast.info(\"Loading form data...\");\n    }\n\n    document.getElementById('create-new-product').checked = true;\n  }; // Function to handle refresh\n\n\n  const handleRefresh = () => {\n    fetchProducts(currentPage, productsPerPage);\n  }; // Fetch Non-Pharmacy Products\n\n\n  const fetchProducts = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : productsPerPage;\n    let forceRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    try {\n      // Add a cache-busting parameter if forceRefresh is true\n      const cacheBuster = forceRefresh ? `&_=${Date.now()}` : '';\n      const fetchUrl = `${API_BASE_URL}?page=${page}&limit=${limit}${cacheBuster}`;\n      console.log(\"Fetch URL:\", fetchUrl);\n      const response = await fetch(fetchUrl);\n      console.log(\"Fetch response status:\", response.status);\n      const data = await response.json();\n\n      if (response.ok) {\n        console.log(\"Fetched non-pharmacy products:\", data.data); // Check if the first product is in the response\n\n        if (data.data && data.data.length > 0) {\n          console.log(\"First product in response:\", data.data[0]);\n        }\n\n        setNonPharmacyProducts(data.data);\n        setTotalProducts(data.totalItems || 0);\n        setTotalPages(data.totalPages || 1);\n      } else {\n        console.error('Error fetching products:', data);\n        toast.error('Failed to fetch products');\n        setNonPharmacyProducts([]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n      setNonPharmacyProducts([]);\n    }\n  }; // Function to refresh the product list\n\n\n  const refreshProductList = () => {\n    console.log(\"Refreshing product list\");\n    fetchProducts(currentPage, productsPerPage, true);\n  }; // Fetch products when the page changes\n\n\n  useEffect(() => {\n    fetchProducts(currentPage, productsPerPage);\n  }, [currentPage, productsPerPage]); // Separate function to fetch dropdown data\n\n  const fetchDropdownData = async () => {\n    try {\n      const [categoriesRes, companiesRes, unitTypesRes] = await Promise.all([fetch(`http://localhost:5000/api/setup/categories`), fetch(`http://localhost:5000/api/setup/companies`), fetch(`http://localhost:5000/api/setup/unitTypes`)]);\n\n      if (categoriesRes.ok) {\n        const categoriesData = await categoriesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(categoriesData)) {\n          setCategories(categoriesData);\n        } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\n          setCategories(categoriesData.data);\n        } else {\n          toast.error(\"Invalid categories data format\");\n        }\n      } else {\n        toast.error(\"Failed to load categories\");\n      }\n\n      if (companiesRes.ok) {\n        const companiesData = await companiesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(companiesData)) {\n          setCompanies(companiesData);\n        } else if (companiesData.data && Array.isArray(companiesData.data)) {\n          setCompanies(companiesData.data);\n        } else {\n          toast.error(\"Invalid companies data format\");\n        }\n      } else {\n        toast.error(\"Failed to load companies\");\n      }\n\n      if (unitTypesRes.ok) {\n        const unitTypesData = await unitTypesRes.json(); // Check if the data is in the expected format\n\n        if (Array.isArray(unitTypesData)) {\n          setUnitTypes(unitTypesData);\n        } else if (unitTypesData.data && Array.isArray(unitTypesData.data)) {\n          setUnitTypes(unitTypesData.data);\n        } else {\n          toast.error(\"Invalid unit types data format\");\n        }\n      } else {\n        toast.error(\"Failed to load unit types\");\n      }\n    } catch (error) {\n      toast.error('Failed to load form data');\n    }\n  }; // Fetch dropdown data when component mounts\n\n\n  useEffect(() => {\n    fetchDropdownData();\n  }, []); // Add New Product\n\n  const addNonPharmacyProduct = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const productDetails = Object.fromEntries(formData.entries()); // Check for required fields\n\n    const requiredFields = ['Product_name', 'Category', 'Company', 'Stock'];\n    const missingFields = requiredFields.filter(field => !productDetails[field]);\n\n    if (missingFields.length > 0) {\n      toast.error(`Missing required fields: ${missingFields.join(', ')}`);\n      return;\n    }\n\n    productDetails.addedBy = 'admin';\n    productDetails.addedToDbAt = new Date().toISOString();\n\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productDetails)\n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        // Close the modal\n        document.getElementById('create-new-product').checked = false; // Show success message\n\n        toast.success(`Product ${productDetails.Product_name} added successfully`); // Refresh the product list\n\n        refreshProductList();\n      } else {\n        console.error('Error adding product:', data);\n        toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error('Network error occurred');\n    } // Reset the form\n\n\n    event.target.reset();\n  }; // Render pagination\n\n\n  const renderPagination = () => {\n    const pages = [];\n\n    for (let i = 1; i <= totalPages; i++) {\n      pages.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ${currentPage === i ? 'btn-primary' : 'btn-ghost'}`,\n        onClick: () => setCurrentPage(i),\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this));\n    }\n\n    return pages;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"p-4 mt-16\",\n    children: [/*#__PURE__*/_jsxDEV(DashboardPageHeading, {\n      name: `Non Pharmacy Products (${totalProducts})`,\n      value: totalProducts,\n      buttons: [/*#__PURE__*/_jsxDEV(NewButton, {\n        onClick: handleOpenModal\n      }, \"new-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n        onClick: refreshProductList\n      }, \"refresh-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PrintButton, {}, \"print-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra table-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Pack TP', 'Pack MRP', 'Actions'].map((item, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-xs md:text-2xs lg:text-md\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: nonPharmacyProducts.map((product, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          tableRowsData: [(currentPage - 1) * productsPerPage + index + 1, product.Product_name || 'N/A', product.Category || 'N/A', product.Company || 'N/A', product.Stock || 'N/A', product.Pack_Type || 'N/A', product.Pack_TP || 'N/A', product.Pack_MRP || 'N/A', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex items-center gap-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(EditNonPharmacyButton, {\n              id: product._id,\n              onUpdate: refreshProductList,\n              initialData: product\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n              deleteApiLink: `${API_BASE_URL}/${product._id}`,\n              itemId: product._id,\n              name: product.Product_name,\n              onDelete: refreshProductList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 33\n          }, this)]\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mt-4 gap-2\",\n      children: renderPagination()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"create-new-product\",\n      className: \"modal-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box relative\",\n        children: [/*#__PURE__*/_jsxDEV(ModalCloseButton, {\n          modalId: \"create-new-product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeading, {\n          text: \"Add New Non-Pharmacy Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addNonPharmacyProduct,\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: \"Product Name\",\n            name: \"Product_name\",\n            placeholder: \"Enter product name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"Category\",\n            options: categories.map(cat => cat.name || cat),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Company\",\n            name: \"Company\",\n            options: companies.map(comp => comp.name || comp),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Stock\",\n            name: \"Stock\",\n            placeholder: \"Enter stock quantity\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            label: \"Pack Type\",\n            name: \"Pack_Type\",\n            placeholder: \"Enter pack type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DoubleInput, {\n            label1: \"Pack TP\",\n            name1: \"Pack_TP\",\n            placeholder1: \"Enter pack TP\",\n            label2: \"Pack MRP\",\n            name2: \"Pack_MRP\",\n            placeholder2: \"Enter pack MRP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n              modalId: \"create-new-product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SaveButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NonPharmacyProducts, \"IzbEChrBjE9eyJteCGfEa5xoci8=\");\n\n_c = NonPharmacyProducts;\nexport default NonPharmacyProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"NonPharmacyProducts\");","map":{"version":3,"names":["React","useState","useEffect","SaveButton","CancelButton","PrintButton","NewButton","Input","Select","DoubleInput","ModalCloseButton","ModalHeading","RefreshButton","TableRow","EditButton","DeleteButton","toast","DashboardPageHeading","AddModal","API_BASE_URL","NonPharmacyProducts","nonPharmacyProducts","setNonPharmacyProducts","categories","setCategories","companies","setCompanies","currentPage","setCurrentPage","productsPerPage","totalProducts","setTotalProducts","totalPages","setTotalPages","handleOpenModal","length","fetchDropdownData","info","document","getElementById","checked","handleRefresh","fetchProducts","page","limit","forceRefresh","cacheBuster","Date","now","fetchUrl","console","log","response","fetch","status","data","json","ok","totalItems","error","refreshProductList","categoriesRes","companiesRes","unitTypesRes","Promise","all","categoriesData","Array","isArray","companiesData","unitTypesData","setUnitTypes","addNonPharmacyProduct","event","preventDefault","formData","FormData","target","productDetails","Object","fromEntries","entries","requiredFields","missingFields","filter","field","join","addedBy","addedToDbAt","toISOString","method","headers","body","JSON","stringify","success","Product_name","reset","renderPagination","pages","i","push","map","item","index","product","Category","Company","Stock","Pack_Type","Pack_TP","Pack_MRP","_id","cat","name","comp"],"sources":["C:/Users/aweso/OneDrive/Desktop/QuickMeds/frontend/src/pages/Dashboard/Products/NonPharmacyProducts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SaveButton from '../../../components/buttons/SaveButton';\r\nimport CancelButton from '../../../components/buttons/CancelButton';\r\nimport PrintButton from '../../../components/buttons/PrintButton';\r\nimport NewButton from '../../../components/buttons/NewButton';\r\nimport Input from '../../../components/form/Input';\r\nimport Select from '../../../components/form/Select';\r\nimport DoubleInput from '../../../components/form/DoubleInput';\r\nimport ModalCloseButton from '../../../components/buttons/ModalCloseButton';\r\nimport ModalHeading from '../../../components/headings/ModalHeading';\r\nimport RefreshButton from '../../../components/buttons/RefreshButton';\r\nimport TableRow from '../../../components/TableRow';\r\nimport EditButton from '../../../components/buttons/EditButton';\r\nimport DeleteButton from '../../../components/buttons/DeleteButton';\r\nimport { toast } from 'react-toastify';\r\nimport DashboardPageHeading from '../../../components/headings/DashboardPageHeading';\r\nimport AddModal from '../../../components/modals/AddModal';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api/products/nonPharmacy';\r\n\r\nconst NonPharmacyProducts = () => {\r\n    const [nonPharmacyProducts, setNonPharmacyProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [productsPerPage] = useState(10);\r\n    const [totalProducts, setTotalProducts] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n\r\n        // Function to handle opening the modal\r\n        const handleOpenModal = () => {\r\n            // Check if dropdown data is loaded\r\n            if (categories.length === 0 || companies.length === 0 ) {\r\n                // If data isn't loaded yet, fetch it first\r\n                fetchDropdownData();\r\n                toast.info(\"Loading form data...\");\r\n            }\r\n            document.getElementById('create-new-product').checked = true;\r\n        };\r\n\r\n        \r\n    // Function to handle refresh\r\n    const handleRefresh = () => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    };\r\n\r\n    // Fetch Non-Pharmacy Products\r\n    const fetchProducts = async (page = 1, limit = productsPerPage, forceRefresh = false) => {\r\n        try {\r\n            // Add a cache-busting parameter if forceRefresh is true\r\n            const cacheBuster = forceRefresh ? `&_=${Date.now()}` : '';\r\n            const fetchUrl = `${API_BASE_URL}?page=${page}&limit=${limit}${cacheBuster}`;\r\n            \r\n            console.log(\"Fetch URL:\", fetchUrl);\r\n            \r\n            const response = await fetch(fetchUrl);\r\n            console.log(\"Fetch response status:\", response.status);\r\n            \r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                console.log(\"Fetched non-pharmacy products:\", data.data);\r\n                \r\n                // Check if the first product is in the response\r\n                if (data.data && data.data.length > 0) {\r\n                    console.log(\"First product in response:\", data.data[0]);\r\n                }\r\n                \r\n                setNonPharmacyProducts(data.data);\r\n                setTotalProducts(data.totalItems || 0);\r\n                setTotalPages(data.totalPages || 1);\r\n            } else {\r\n                console.error('Error fetching products:', data);\r\n                toast.error('Failed to fetch products');\r\n                setNonPharmacyProducts([]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n            setNonPharmacyProducts([]);\r\n        }\r\n    };\r\n\r\n    // Function to refresh the product list\r\n    const refreshProductList = () => {\r\n        console.log(\"Refreshing product list\");\r\n        fetchProducts(currentPage, productsPerPage, true);\r\n    };\r\n\r\n    // Fetch products when the page changes\r\n    useEffect(() => {\r\n        fetchProducts(currentPage, productsPerPage);\r\n    }, [currentPage, productsPerPage]);\r\n\r\n        // Separate function to fetch dropdown data\r\n    const fetchDropdownData = async () => {\r\n        try {\r\n            const [categoriesRes, companiesRes, unitTypesRes] = await Promise.all([\r\n                fetch(`http://localhost:5000/api/setup/categories`),\r\n                fetch(`http://localhost:5000/api/setup/companies`),\r\n                fetch(`http://localhost:5000/api/setup/unitTypes`)\r\n            ]);\r\n            \r\n            if (categoriesRes.ok) {\r\n                const categoriesData = await categoriesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(categoriesData)) {\r\n                    setCategories(categoriesData);\r\n                } else if (categoriesData.data && Array.isArray(categoriesData.data)) {\r\n                    setCategories(categoriesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid categories data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load categories\");\r\n            }\r\n            \r\n            if (companiesRes.ok) {\r\n                const companiesData = await companiesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(companiesData)) {\r\n                    setCompanies(companiesData);\r\n                } else if (companiesData.data && Array.isArray(companiesData.data)) {\r\n                    setCompanies(companiesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid companies data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load companies\");\r\n            }\r\n            \r\n            if (unitTypesRes.ok) {\r\n                const unitTypesData = await unitTypesRes.json();\r\n                // Check if the data is in the expected format\r\n                if (Array.isArray(unitTypesData)) {\r\n                    setUnitTypes(unitTypesData);\r\n                } else if (unitTypesData.data && Array.isArray(unitTypesData.data)) {\r\n                    setUnitTypes(unitTypesData.data);\r\n                } else {\r\n                    toast.error(\"Invalid unit types data format\");\r\n                }\r\n            } else {\r\n                toast.error(\"Failed to load unit types\");\r\n            }\r\n        } catch (error) {\r\n            toast.error('Failed to load form data');\r\n        }\r\n    };\r\n\r\n    // Fetch dropdown data when component mounts\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, []);\r\n\r\n    // Add New Product\r\n    const addNonPharmacyProduct = async (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const productDetails = Object.fromEntries(formData.entries());\r\n        // Check for required fields\r\n        const requiredFields = ['Product_name', 'Category', 'Company', 'Stock'];\r\n        const missingFields = requiredFields.filter(field => !productDetails[field]);\r\n        \r\n        if (missingFields.length > 0) {\r\n            toast.error(`Missing required fields: ${missingFields.join(', ')}`);\r\n            return;\r\n        }\r\n        productDetails.addedBy = 'admin';\r\n        productDetails.addedToDbAt = new Date().toISOString();\r\n\r\n        try {\r\n            const response = await fetch(API_BASE_URL, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(productDetails),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                // Close the modal\r\n                document.getElementById('create-new-product').checked = false;\r\n                \r\n                // Show success message\r\n                toast.success(`Product ${productDetails.Product_name} added successfully`);\r\n                \r\n                // Refresh the product list\r\n                refreshProductList();\r\n            } else {\r\n                console.error('Error adding product:', data);\r\n                toast.error(`Failed to add product: ${data.error || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            toast.error('Network error occurred');\r\n        }\r\n        \r\n        // Reset the form\r\n        event.target.reset();\r\n    };\r\n\r\n    // Render pagination\r\n    const renderPagination = () => {\r\n        const pages = [];\r\n        for (let i = 1; i <= totalPages; i++) {\r\n            pages.push(\r\n                <button\r\n                    key={i}\r\n                    className={`btn ${currentPage === i ? 'btn-primary' : 'btn-ghost'}`}\r\n                    onClick={() => setCurrentPage(i)}\r\n                >\r\n                    {i}\r\n                </button>\r\n            );\r\n        }\r\n        return pages;\r\n    };\r\n\r\n    return (\r\n        <section className='p-4 mt-16'>\r\n            <DashboardPageHeading\r\n                name={`Non Pharmacy Products (${totalProducts})`}\r\n                value={totalProducts}\r\n                buttons={[\r\n                    <NewButton key=\"new-button\" onClick={handleOpenModal} />,\r\n                    <RefreshButton key=\"refresh-button\" onClick={refreshProductList} />,\r\n                    <PrintButton key=\"print-button\" />\r\n                ]}\r\n            />\r\n\r\n            {/* Products Table */}\r\n            <table className=\"table table-zebra table-compact\">\r\n                <thead>\r\n                    <tr>\r\n                        {['SN', 'Product Name', 'Category', 'Company', 'Stock', 'Pack Type', 'Pack TP', 'Pack MRP', 'Actions'].map((item, index) => (\r\n                            <th key={index} className='text-xs md:text-2xs lg:text-md'>{item}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {nonPharmacyProducts.map((product, index) => (\r\n                        <TableRow\r\n                            key={product._id}\r\n                            tableRowsData={[\r\n                                (currentPage - 1) * productsPerPage + index + 1,\r\n                                product.Product_name || 'N/A',\r\n                                product.Category || 'N/A',\r\n                                product.Company || 'N/A',\r\n                                product.Stock || 'N/A',\r\n                                product.Pack_Type || 'N/A',\r\n                                product.Pack_TP || 'N/A',\r\n                                product.Pack_MRP || 'N/A',\r\n                                <span className='flex items-center gap-x-1'>\r\n                                    <EditNonPharmacyButton \r\n                                        id={product._id} \r\n                                        onUpdate={refreshProductList}\r\n                                        initialData={product}\r\n                                    />\r\n                                    <DeleteButton \r\n                                        deleteApiLink={`${API_BASE_URL}/${product._id}`} \r\n                                        itemId={product._id} \r\n                                        name={product.Product_name} \r\n                                        onDelete={refreshProductList}\r\n                                    />\r\n                                </span>\r\n                            ]}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* Pagination */}\r\n            <div className=\"flex justify-center mt-4 gap-2\">\r\n                {renderPagination()}\r\n            </div>\r\n\r\n            {/* Add New Product Modal */}\r\n            <input type=\"checkbox\" id=\"create-new-product\" className=\"modal-toggle\" />\r\n            <div className=\"modal\">\r\n                <div className=\"modal-box relative\">\r\n                    <ModalCloseButton modalId=\"create-new-product\" />\r\n                    <ModalHeading text=\"Add New Non-Pharmacy Product\" />\r\n                    \r\n                    <form onSubmit={addNonPharmacyProduct} className=\"space-y-4\">\r\n                        <Input \r\n                            label=\"Product Name\" \r\n                            name=\"Product_name\" \r\n                            placeholder=\"Enter product name\" \r\n                            required \r\n                        />\r\n                        \r\n                        <Select \r\n                            label=\"Category\" \r\n                            name=\"Category\" \r\n                            options={categories.map(cat => cat.name || cat)} \r\n                            required \r\n                        />\r\n                        \r\n                        <Select \r\n                            label=\"Company\" \r\n                            name=\"Company\" \r\n                            options={companies.map(comp => comp.name || comp)} \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Stock\" \r\n                            name=\"Stock\" \r\n                            placeholder=\"Enter stock quantity\" \r\n                            required \r\n                        />\r\n                        \r\n                        <Input \r\n                            label=\"Pack Type\" \r\n                            name=\"Pack_Type\" \r\n                            placeholder=\"Enter pack type\" \r\n                        />\r\n                        \r\n                        <DoubleInput \r\n                            label1=\"Pack TP\" \r\n                            name1=\"Pack_TP\" \r\n                            placeholder1=\"Enter pack TP\" \r\n                            label2=\"Pack MRP\" \r\n                            name2=\"Pack_MRP\" \r\n                            placeholder2=\"Enter pack MRP\" \r\n                        />\r\n                        \r\n                        <div className=\"flex justify-end gap-2\">\r\n                            <CancelButton modalId=\"create-new-product\" />\r\n                            <SaveButton />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NonPharmacyProducts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}